
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Sexo
 * 
 */
export type Sexo = $Result.DefaultSelection<Prisma.$SexoPayload>
/**
 * Model Profesion
 * 
 */
export type Profesion = $Result.DefaultSelection<Prisma.$ProfesionPayload>
/**
 * Model EstadoCivil
 * 
 */
export type EstadoCivil = $Result.DefaultSelection<Prisma.$EstadoCivilPayload>
/**
 * Model Area
 * 
 */
export type Area = $Result.DefaultSelection<Prisma.$AreaPayload>
/**
 * Model Colaborador
 * 
 */
export type Colaborador = $Result.DefaultSelection<Prisma.$ColaboradorPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sexo`: Exposes CRUD operations for the **Sexo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sexos
    * const sexos = await prisma.sexo.findMany()
    * ```
    */
  get sexo(): Prisma.SexoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profesion`: Exposes CRUD operations for the **Profesion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profesions
    * const profesions = await prisma.profesion.findMany()
    * ```
    */
  get profesion(): Prisma.ProfesionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.estadoCivil`: Exposes CRUD operations for the **EstadoCivil** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EstadoCivils
    * const estadoCivils = await prisma.estadoCivil.findMany()
    * ```
    */
  get estadoCivil(): Prisma.EstadoCivilDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.area`: Exposes CRUD operations for the **Area** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Areas
    * const areas = await prisma.area.findMany()
    * ```
    */
  get area(): Prisma.AreaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.colaborador`: Exposes CRUD operations for the **Colaborador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Colaboradors
    * const colaboradors = await prisma.colaborador.findMany()
    * ```
    */
  get colaborador(): Prisma.ColaboradorDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Sexo: 'Sexo',
    Profesion: 'Profesion',
    EstadoCivil: 'EstadoCivil',
    Area: 'Area',
    Colaborador: 'Colaborador'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "usuario" | "sexo" | "profesion" | "estadoCivil" | "area" | "colaborador"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsuarioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Sexo: {
        payload: Prisma.$SexoPayload<ExtArgs>
        fields: Prisma.SexoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SexoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SexoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SexoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SexoPayload>
          }
          findFirst: {
            args: Prisma.SexoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SexoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SexoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SexoPayload>
          }
          findMany: {
            args: Prisma.SexoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SexoPayload>[]
          }
          create: {
            args: Prisma.SexoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SexoPayload>
          }
          createMany: {
            args: Prisma.SexoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SexoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SexoPayload>[]
          }
          delete: {
            args: Prisma.SexoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SexoPayload>
          }
          update: {
            args: Prisma.SexoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SexoPayload>
          }
          deleteMany: {
            args: Prisma.SexoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SexoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SexoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SexoPayload>[]
          }
          upsert: {
            args: Prisma.SexoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SexoPayload>
          }
          aggregate: {
            args: Prisma.SexoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSexo>
          }
          groupBy: {
            args: Prisma.SexoGroupByArgs<ExtArgs>
            result: $Utils.Optional<SexoGroupByOutputType>[]
          }
          count: {
            args: Prisma.SexoCountArgs<ExtArgs>
            result: $Utils.Optional<SexoCountAggregateOutputType> | number
          }
        }
      }
      Profesion: {
        payload: Prisma.$ProfesionPayload<ExtArgs>
        fields: Prisma.ProfesionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfesionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfesionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfesionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfesionPayload>
          }
          findFirst: {
            args: Prisma.ProfesionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfesionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfesionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfesionPayload>
          }
          findMany: {
            args: Prisma.ProfesionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfesionPayload>[]
          }
          create: {
            args: Prisma.ProfesionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfesionPayload>
          }
          createMany: {
            args: Prisma.ProfesionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfesionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfesionPayload>[]
          }
          delete: {
            args: Prisma.ProfesionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfesionPayload>
          }
          update: {
            args: Prisma.ProfesionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfesionPayload>
          }
          deleteMany: {
            args: Prisma.ProfesionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfesionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfesionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfesionPayload>[]
          }
          upsert: {
            args: Prisma.ProfesionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfesionPayload>
          }
          aggregate: {
            args: Prisma.ProfesionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfesion>
          }
          groupBy: {
            args: Prisma.ProfesionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfesionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfesionCountArgs<ExtArgs>
            result: $Utils.Optional<ProfesionCountAggregateOutputType> | number
          }
        }
      }
      EstadoCivil: {
        payload: Prisma.$EstadoCivilPayload<ExtArgs>
        fields: Prisma.EstadoCivilFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EstadoCivilFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoCivilPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EstadoCivilFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoCivilPayload>
          }
          findFirst: {
            args: Prisma.EstadoCivilFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoCivilPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EstadoCivilFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoCivilPayload>
          }
          findMany: {
            args: Prisma.EstadoCivilFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoCivilPayload>[]
          }
          create: {
            args: Prisma.EstadoCivilCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoCivilPayload>
          }
          createMany: {
            args: Prisma.EstadoCivilCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EstadoCivilCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoCivilPayload>[]
          }
          delete: {
            args: Prisma.EstadoCivilDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoCivilPayload>
          }
          update: {
            args: Prisma.EstadoCivilUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoCivilPayload>
          }
          deleteMany: {
            args: Prisma.EstadoCivilDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EstadoCivilUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EstadoCivilUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoCivilPayload>[]
          }
          upsert: {
            args: Prisma.EstadoCivilUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoCivilPayload>
          }
          aggregate: {
            args: Prisma.EstadoCivilAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEstadoCivil>
          }
          groupBy: {
            args: Prisma.EstadoCivilGroupByArgs<ExtArgs>
            result: $Utils.Optional<EstadoCivilGroupByOutputType>[]
          }
          count: {
            args: Prisma.EstadoCivilCountArgs<ExtArgs>
            result: $Utils.Optional<EstadoCivilCountAggregateOutputType> | number
          }
        }
      }
      Area: {
        payload: Prisma.$AreaPayload<ExtArgs>
        fields: Prisma.AreaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AreaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AreaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AreaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AreaPayload>
          }
          findFirst: {
            args: Prisma.AreaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AreaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AreaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AreaPayload>
          }
          findMany: {
            args: Prisma.AreaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AreaPayload>[]
          }
          create: {
            args: Prisma.AreaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AreaPayload>
          }
          createMany: {
            args: Prisma.AreaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AreaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AreaPayload>[]
          }
          delete: {
            args: Prisma.AreaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AreaPayload>
          }
          update: {
            args: Prisma.AreaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AreaPayload>
          }
          deleteMany: {
            args: Prisma.AreaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AreaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AreaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AreaPayload>[]
          }
          upsert: {
            args: Prisma.AreaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AreaPayload>
          }
          aggregate: {
            args: Prisma.AreaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArea>
          }
          groupBy: {
            args: Prisma.AreaGroupByArgs<ExtArgs>
            result: $Utils.Optional<AreaGroupByOutputType>[]
          }
          count: {
            args: Prisma.AreaCountArgs<ExtArgs>
            result: $Utils.Optional<AreaCountAggregateOutputType> | number
          }
        }
      }
      Colaborador: {
        payload: Prisma.$ColaboradorPayload<ExtArgs>
        fields: Prisma.ColaboradorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ColaboradorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColaboradorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ColaboradorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColaboradorPayload>
          }
          findFirst: {
            args: Prisma.ColaboradorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColaboradorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ColaboradorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColaboradorPayload>
          }
          findMany: {
            args: Prisma.ColaboradorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColaboradorPayload>[]
          }
          create: {
            args: Prisma.ColaboradorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColaboradorPayload>
          }
          createMany: {
            args: Prisma.ColaboradorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ColaboradorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColaboradorPayload>[]
          }
          delete: {
            args: Prisma.ColaboradorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColaboradorPayload>
          }
          update: {
            args: Prisma.ColaboradorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColaboradorPayload>
          }
          deleteMany: {
            args: Prisma.ColaboradorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ColaboradorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ColaboradorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColaboradorPayload>[]
          }
          upsert: {
            args: Prisma.ColaboradorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColaboradorPayload>
          }
          aggregate: {
            args: Prisma.ColaboradorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateColaborador>
          }
          groupBy: {
            args: Prisma.ColaboradorGroupByArgs<ExtArgs>
            result: $Utils.Optional<ColaboradorGroupByOutputType>[]
          }
          count: {
            args: Prisma.ColaboradorCountArgs<ExtArgs>
            result: $Utils.Optional<ColaboradorCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    usuario?: UsuarioOmit
    sexo?: SexoOmit
    profesion?: ProfesionOmit
    estadoCivil?: EstadoCivilOmit
    area?: AreaOmit
    colaborador?: ColaboradorOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SexoCountOutputType
   */

  export type SexoCountOutputType = {
    colaboradores: number
  }

  export type SexoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaboradores?: boolean | SexoCountOutputTypeCountColaboradoresArgs
  }

  // Custom InputTypes
  /**
   * SexoCountOutputType without action
   */
  export type SexoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SexoCountOutputType
     */
    select?: SexoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SexoCountOutputType without action
   */
  export type SexoCountOutputTypeCountColaboradoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ColaboradorWhereInput
  }


  /**
   * Count Type ProfesionCountOutputType
   */

  export type ProfesionCountOutputType = {
    colaboradores: number
  }

  export type ProfesionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaboradores?: boolean | ProfesionCountOutputTypeCountColaboradoresArgs
  }

  // Custom InputTypes
  /**
   * ProfesionCountOutputType without action
   */
  export type ProfesionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfesionCountOutputType
     */
    select?: ProfesionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfesionCountOutputType without action
   */
  export type ProfesionCountOutputTypeCountColaboradoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ColaboradorWhereInput
  }


  /**
   * Count Type EstadoCivilCountOutputType
   */

  export type EstadoCivilCountOutputType = {
    colaboradores: number
  }

  export type EstadoCivilCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaboradores?: boolean | EstadoCivilCountOutputTypeCountColaboradoresArgs
  }

  // Custom InputTypes
  /**
   * EstadoCivilCountOutputType without action
   */
  export type EstadoCivilCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstadoCivilCountOutputType
     */
    select?: EstadoCivilCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EstadoCivilCountOutputType without action
   */
  export type EstadoCivilCountOutputTypeCountColaboradoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ColaboradorWhereInput
  }


  /**
   * Count Type AreaCountOutputType
   */

  export type AreaCountOutputType = {
    colaboradores: number
  }

  export type AreaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaboradores?: boolean | AreaCountOutputTypeCountColaboradoresArgs
  }

  // Custom InputTypes
  /**
   * AreaCountOutputType without action
   */
  export type AreaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AreaCountOutputType
     */
    select?: AreaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AreaCountOutputType without action
   */
  export type AreaCountOutputTypeCountColaboradoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ColaboradorWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    nombre: string | null
    activo: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    nombre: string | null
    activo: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    email: number
    password: number
    nombre: number
    activo: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    nombre?: true
    activo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    nombre?: true
    activo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    nombre?: true
    activo?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    email: string
    password: string
    nombre: string
    activo: boolean
    createdAt: Date
    updatedAt: Date
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    nombre?: boolean
    activo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    nombre?: boolean
    activo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    nombre?: boolean
    activo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    nombre?: boolean
    activo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UsuarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "nombre" | "activo" | "createdAt" | "updatedAt", ExtArgs["result"]["usuario"]>

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      nombre: string
      activo: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios and returns the data updated in the database.
     * @param {UsuarioUpdateManyAndReturnArgs} args - Arguments to update many Usuarios.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsuarioUpdateManyAndReturnArgs>(args: SelectSubset<T, UsuarioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly password: FieldRef<"Usuario", 'String'>
    readonly nombre: FieldRef<"Usuario", 'String'>
    readonly activo: FieldRef<"Usuario", 'Boolean'>
    readonly createdAt: FieldRef<"Usuario", 'DateTime'>
    readonly updatedAt: FieldRef<"Usuario", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario updateManyAndReturn
   */
  export type UsuarioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
  }


  /**
   * Model Sexo
   */

  export type AggregateSexo = {
    _count: SexoCountAggregateOutputType | null
    _avg: SexoAvgAggregateOutputType | null
    _sum: SexoSumAggregateOutputType | null
    _min: SexoMinAggregateOutputType | null
    _max: SexoMaxAggregateOutputType | null
  }

  export type SexoAvgAggregateOutputType = {
    id: number | null
  }

  export type SexoSumAggregateOutputType = {
    id: number | null
  }

  export type SexoMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    activo: boolean | null
  }

  export type SexoMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    activo: boolean | null
  }

  export type SexoCountAggregateOutputType = {
    id: number
    nombre: number
    activo: number
    _all: number
  }


  export type SexoAvgAggregateInputType = {
    id?: true
  }

  export type SexoSumAggregateInputType = {
    id?: true
  }

  export type SexoMinAggregateInputType = {
    id?: true
    nombre?: true
    activo?: true
  }

  export type SexoMaxAggregateInputType = {
    id?: true
    nombre?: true
    activo?: true
  }

  export type SexoCountAggregateInputType = {
    id?: true
    nombre?: true
    activo?: true
    _all?: true
  }

  export type SexoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sexo to aggregate.
     */
    where?: SexoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sexos to fetch.
     */
    orderBy?: SexoOrderByWithRelationInput | SexoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SexoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sexos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sexos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sexos
    **/
    _count?: true | SexoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SexoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SexoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SexoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SexoMaxAggregateInputType
  }

  export type GetSexoAggregateType<T extends SexoAggregateArgs> = {
        [P in keyof T & keyof AggregateSexo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSexo[P]>
      : GetScalarType<T[P], AggregateSexo[P]>
  }




  export type SexoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SexoWhereInput
    orderBy?: SexoOrderByWithAggregationInput | SexoOrderByWithAggregationInput[]
    by: SexoScalarFieldEnum[] | SexoScalarFieldEnum
    having?: SexoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SexoCountAggregateInputType | true
    _avg?: SexoAvgAggregateInputType
    _sum?: SexoSumAggregateInputType
    _min?: SexoMinAggregateInputType
    _max?: SexoMaxAggregateInputType
  }

  export type SexoGroupByOutputType = {
    id: number
    nombre: string
    activo: boolean
    _count: SexoCountAggregateOutputType | null
    _avg: SexoAvgAggregateOutputType | null
    _sum: SexoSumAggregateOutputType | null
    _min: SexoMinAggregateOutputType | null
    _max: SexoMaxAggregateOutputType | null
  }

  type GetSexoGroupByPayload<T extends SexoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SexoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SexoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SexoGroupByOutputType[P]>
            : GetScalarType<T[P], SexoGroupByOutputType[P]>
        }
      >
    >


  export type SexoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    activo?: boolean
    colaboradores?: boolean | Sexo$colaboradoresArgs<ExtArgs>
    _count?: boolean | SexoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sexo"]>

  export type SexoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    activo?: boolean
  }, ExtArgs["result"]["sexo"]>

  export type SexoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    activo?: boolean
  }, ExtArgs["result"]["sexo"]>

  export type SexoSelectScalar = {
    id?: boolean
    nombre?: boolean
    activo?: boolean
  }

  export type SexoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "activo", ExtArgs["result"]["sexo"]>
  export type SexoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaboradores?: boolean | Sexo$colaboradoresArgs<ExtArgs>
    _count?: boolean | SexoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SexoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SexoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SexoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sexo"
    objects: {
      colaboradores: Prisma.$ColaboradorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      activo: boolean
    }, ExtArgs["result"]["sexo"]>
    composites: {}
  }

  type SexoGetPayload<S extends boolean | null | undefined | SexoDefaultArgs> = $Result.GetResult<Prisma.$SexoPayload, S>

  type SexoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SexoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SexoCountAggregateInputType | true
    }

  export interface SexoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sexo'], meta: { name: 'Sexo' } }
    /**
     * Find zero or one Sexo that matches the filter.
     * @param {SexoFindUniqueArgs} args - Arguments to find a Sexo
     * @example
     * // Get one Sexo
     * const sexo = await prisma.sexo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SexoFindUniqueArgs>(args: SelectSubset<T, SexoFindUniqueArgs<ExtArgs>>): Prisma__SexoClient<$Result.GetResult<Prisma.$SexoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sexo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SexoFindUniqueOrThrowArgs} args - Arguments to find a Sexo
     * @example
     * // Get one Sexo
     * const sexo = await prisma.sexo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SexoFindUniqueOrThrowArgs>(args: SelectSubset<T, SexoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SexoClient<$Result.GetResult<Prisma.$SexoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sexo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SexoFindFirstArgs} args - Arguments to find a Sexo
     * @example
     * // Get one Sexo
     * const sexo = await prisma.sexo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SexoFindFirstArgs>(args?: SelectSubset<T, SexoFindFirstArgs<ExtArgs>>): Prisma__SexoClient<$Result.GetResult<Prisma.$SexoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sexo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SexoFindFirstOrThrowArgs} args - Arguments to find a Sexo
     * @example
     * // Get one Sexo
     * const sexo = await prisma.sexo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SexoFindFirstOrThrowArgs>(args?: SelectSubset<T, SexoFindFirstOrThrowArgs<ExtArgs>>): Prisma__SexoClient<$Result.GetResult<Prisma.$SexoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sexos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SexoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sexos
     * const sexos = await prisma.sexo.findMany()
     * 
     * // Get first 10 Sexos
     * const sexos = await prisma.sexo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sexoWithIdOnly = await prisma.sexo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SexoFindManyArgs>(args?: SelectSubset<T, SexoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SexoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sexo.
     * @param {SexoCreateArgs} args - Arguments to create a Sexo.
     * @example
     * // Create one Sexo
     * const Sexo = await prisma.sexo.create({
     *   data: {
     *     // ... data to create a Sexo
     *   }
     * })
     * 
     */
    create<T extends SexoCreateArgs>(args: SelectSubset<T, SexoCreateArgs<ExtArgs>>): Prisma__SexoClient<$Result.GetResult<Prisma.$SexoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sexos.
     * @param {SexoCreateManyArgs} args - Arguments to create many Sexos.
     * @example
     * // Create many Sexos
     * const sexo = await prisma.sexo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SexoCreateManyArgs>(args?: SelectSubset<T, SexoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sexos and returns the data saved in the database.
     * @param {SexoCreateManyAndReturnArgs} args - Arguments to create many Sexos.
     * @example
     * // Create many Sexos
     * const sexo = await prisma.sexo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sexos and only return the `id`
     * const sexoWithIdOnly = await prisma.sexo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SexoCreateManyAndReturnArgs>(args?: SelectSubset<T, SexoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SexoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Sexo.
     * @param {SexoDeleteArgs} args - Arguments to delete one Sexo.
     * @example
     * // Delete one Sexo
     * const Sexo = await prisma.sexo.delete({
     *   where: {
     *     // ... filter to delete one Sexo
     *   }
     * })
     * 
     */
    delete<T extends SexoDeleteArgs>(args: SelectSubset<T, SexoDeleteArgs<ExtArgs>>): Prisma__SexoClient<$Result.GetResult<Prisma.$SexoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sexo.
     * @param {SexoUpdateArgs} args - Arguments to update one Sexo.
     * @example
     * // Update one Sexo
     * const sexo = await prisma.sexo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SexoUpdateArgs>(args: SelectSubset<T, SexoUpdateArgs<ExtArgs>>): Prisma__SexoClient<$Result.GetResult<Prisma.$SexoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sexos.
     * @param {SexoDeleteManyArgs} args - Arguments to filter Sexos to delete.
     * @example
     * // Delete a few Sexos
     * const { count } = await prisma.sexo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SexoDeleteManyArgs>(args?: SelectSubset<T, SexoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sexos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SexoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sexos
     * const sexo = await prisma.sexo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SexoUpdateManyArgs>(args: SelectSubset<T, SexoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sexos and returns the data updated in the database.
     * @param {SexoUpdateManyAndReturnArgs} args - Arguments to update many Sexos.
     * @example
     * // Update many Sexos
     * const sexo = await prisma.sexo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sexos and only return the `id`
     * const sexoWithIdOnly = await prisma.sexo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SexoUpdateManyAndReturnArgs>(args: SelectSubset<T, SexoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SexoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Sexo.
     * @param {SexoUpsertArgs} args - Arguments to update or create a Sexo.
     * @example
     * // Update or create a Sexo
     * const sexo = await prisma.sexo.upsert({
     *   create: {
     *     // ... data to create a Sexo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sexo we want to update
     *   }
     * })
     */
    upsert<T extends SexoUpsertArgs>(args: SelectSubset<T, SexoUpsertArgs<ExtArgs>>): Prisma__SexoClient<$Result.GetResult<Prisma.$SexoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sexos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SexoCountArgs} args - Arguments to filter Sexos to count.
     * @example
     * // Count the number of Sexos
     * const count = await prisma.sexo.count({
     *   where: {
     *     // ... the filter for the Sexos we want to count
     *   }
     * })
    **/
    count<T extends SexoCountArgs>(
      args?: Subset<T, SexoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SexoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sexo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SexoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SexoAggregateArgs>(args: Subset<T, SexoAggregateArgs>): Prisma.PrismaPromise<GetSexoAggregateType<T>>

    /**
     * Group by Sexo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SexoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SexoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SexoGroupByArgs['orderBy'] }
        : { orderBy?: SexoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SexoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSexoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sexo model
   */
  readonly fields: SexoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sexo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SexoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    colaboradores<T extends Sexo$colaboradoresArgs<ExtArgs> = {}>(args?: Subset<T, Sexo$colaboradoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sexo model
   */
  interface SexoFieldRefs {
    readonly id: FieldRef<"Sexo", 'Int'>
    readonly nombre: FieldRef<"Sexo", 'String'>
    readonly activo: FieldRef<"Sexo", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Sexo findUnique
   */
  export type SexoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sexo
     */
    select?: SexoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sexo
     */
    omit?: SexoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SexoInclude<ExtArgs> | null
    /**
     * Filter, which Sexo to fetch.
     */
    where: SexoWhereUniqueInput
  }

  /**
   * Sexo findUniqueOrThrow
   */
  export type SexoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sexo
     */
    select?: SexoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sexo
     */
    omit?: SexoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SexoInclude<ExtArgs> | null
    /**
     * Filter, which Sexo to fetch.
     */
    where: SexoWhereUniqueInput
  }

  /**
   * Sexo findFirst
   */
  export type SexoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sexo
     */
    select?: SexoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sexo
     */
    omit?: SexoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SexoInclude<ExtArgs> | null
    /**
     * Filter, which Sexo to fetch.
     */
    where?: SexoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sexos to fetch.
     */
    orderBy?: SexoOrderByWithRelationInput | SexoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sexos.
     */
    cursor?: SexoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sexos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sexos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sexos.
     */
    distinct?: SexoScalarFieldEnum | SexoScalarFieldEnum[]
  }

  /**
   * Sexo findFirstOrThrow
   */
  export type SexoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sexo
     */
    select?: SexoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sexo
     */
    omit?: SexoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SexoInclude<ExtArgs> | null
    /**
     * Filter, which Sexo to fetch.
     */
    where?: SexoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sexos to fetch.
     */
    orderBy?: SexoOrderByWithRelationInput | SexoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sexos.
     */
    cursor?: SexoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sexos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sexos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sexos.
     */
    distinct?: SexoScalarFieldEnum | SexoScalarFieldEnum[]
  }

  /**
   * Sexo findMany
   */
  export type SexoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sexo
     */
    select?: SexoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sexo
     */
    omit?: SexoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SexoInclude<ExtArgs> | null
    /**
     * Filter, which Sexos to fetch.
     */
    where?: SexoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sexos to fetch.
     */
    orderBy?: SexoOrderByWithRelationInput | SexoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sexos.
     */
    cursor?: SexoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sexos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sexos.
     */
    skip?: number
    distinct?: SexoScalarFieldEnum | SexoScalarFieldEnum[]
  }

  /**
   * Sexo create
   */
  export type SexoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sexo
     */
    select?: SexoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sexo
     */
    omit?: SexoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SexoInclude<ExtArgs> | null
    /**
     * The data needed to create a Sexo.
     */
    data: XOR<SexoCreateInput, SexoUncheckedCreateInput>
  }

  /**
   * Sexo createMany
   */
  export type SexoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sexos.
     */
    data: SexoCreateManyInput | SexoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sexo createManyAndReturn
   */
  export type SexoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sexo
     */
    select?: SexoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sexo
     */
    omit?: SexoOmit<ExtArgs> | null
    /**
     * The data used to create many Sexos.
     */
    data: SexoCreateManyInput | SexoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sexo update
   */
  export type SexoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sexo
     */
    select?: SexoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sexo
     */
    omit?: SexoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SexoInclude<ExtArgs> | null
    /**
     * The data needed to update a Sexo.
     */
    data: XOR<SexoUpdateInput, SexoUncheckedUpdateInput>
    /**
     * Choose, which Sexo to update.
     */
    where: SexoWhereUniqueInput
  }

  /**
   * Sexo updateMany
   */
  export type SexoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sexos.
     */
    data: XOR<SexoUpdateManyMutationInput, SexoUncheckedUpdateManyInput>
    /**
     * Filter which Sexos to update
     */
    where?: SexoWhereInput
    /**
     * Limit how many Sexos to update.
     */
    limit?: number
  }

  /**
   * Sexo updateManyAndReturn
   */
  export type SexoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sexo
     */
    select?: SexoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sexo
     */
    omit?: SexoOmit<ExtArgs> | null
    /**
     * The data used to update Sexos.
     */
    data: XOR<SexoUpdateManyMutationInput, SexoUncheckedUpdateManyInput>
    /**
     * Filter which Sexos to update
     */
    where?: SexoWhereInput
    /**
     * Limit how many Sexos to update.
     */
    limit?: number
  }

  /**
   * Sexo upsert
   */
  export type SexoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sexo
     */
    select?: SexoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sexo
     */
    omit?: SexoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SexoInclude<ExtArgs> | null
    /**
     * The filter to search for the Sexo to update in case it exists.
     */
    where: SexoWhereUniqueInput
    /**
     * In case the Sexo found by the `where` argument doesn't exist, create a new Sexo with this data.
     */
    create: XOR<SexoCreateInput, SexoUncheckedCreateInput>
    /**
     * In case the Sexo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SexoUpdateInput, SexoUncheckedUpdateInput>
  }

  /**
   * Sexo delete
   */
  export type SexoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sexo
     */
    select?: SexoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sexo
     */
    omit?: SexoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SexoInclude<ExtArgs> | null
    /**
     * Filter which Sexo to delete.
     */
    where: SexoWhereUniqueInput
  }

  /**
   * Sexo deleteMany
   */
  export type SexoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sexos to delete
     */
    where?: SexoWhereInput
    /**
     * Limit how many Sexos to delete.
     */
    limit?: number
  }

  /**
   * Sexo.colaboradores
   */
  export type Sexo$colaboradoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Colaborador
     */
    omit?: ColaboradorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    where?: ColaboradorWhereInput
    orderBy?: ColaboradorOrderByWithRelationInput | ColaboradorOrderByWithRelationInput[]
    cursor?: ColaboradorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ColaboradorScalarFieldEnum | ColaboradorScalarFieldEnum[]
  }

  /**
   * Sexo without action
   */
  export type SexoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sexo
     */
    select?: SexoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sexo
     */
    omit?: SexoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SexoInclude<ExtArgs> | null
  }


  /**
   * Model Profesion
   */

  export type AggregateProfesion = {
    _count: ProfesionCountAggregateOutputType | null
    _avg: ProfesionAvgAggregateOutputType | null
    _sum: ProfesionSumAggregateOutputType | null
    _min: ProfesionMinAggregateOutputType | null
    _max: ProfesionMaxAggregateOutputType | null
  }

  export type ProfesionAvgAggregateOutputType = {
    id: number | null
  }

  export type ProfesionSumAggregateOutputType = {
    id: number | null
  }

  export type ProfesionMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    activo: boolean | null
  }

  export type ProfesionMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    activo: boolean | null
  }

  export type ProfesionCountAggregateOutputType = {
    id: number
    nombre: number
    activo: number
    _all: number
  }


  export type ProfesionAvgAggregateInputType = {
    id?: true
  }

  export type ProfesionSumAggregateInputType = {
    id?: true
  }

  export type ProfesionMinAggregateInputType = {
    id?: true
    nombre?: true
    activo?: true
  }

  export type ProfesionMaxAggregateInputType = {
    id?: true
    nombre?: true
    activo?: true
  }

  export type ProfesionCountAggregateInputType = {
    id?: true
    nombre?: true
    activo?: true
    _all?: true
  }

  export type ProfesionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profesion to aggregate.
     */
    where?: ProfesionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profesions to fetch.
     */
    orderBy?: ProfesionOrderByWithRelationInput | ProfesionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfesionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profesions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profesions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profesions
    **/
    _count?: true | ProfesionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfesionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfesionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfesionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfesionMaxAggregateInputType
  }

  export type GetProfesionAggregateType<T extends ProfesionAggregateArgs> = {
        [P in keyof T & keyof AggregateProfesion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfesion[P]>
      : GetScalarType<T[P], AggregateProfesion[P]>
  }




  export type ProfesionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfesionWhereInput
    orderBy?: ProfesionOrderByWithAggregationInput | ProfesionOrderByWithAggregationInput[]
    by: ProfesionScalarFieldEnum[] | ProfesionScalarFieldEnum
    having?: ProfesionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfesionCountAggregateInputType | true
    _avg?: ProfesionAvgAggregateInputType
    _sum?: ProfesionSumAggregateInputType
    _min?: ProfesionMinAggregateInputType
    _max?: ProfesionMaxAggregateInputType
  }

  export type ProfesionGroupByOutputType = {
    id: number
    nombre: string
    activo: boolean
    _count: ProfesionCountAggregateOutputType | null
    _avg: ProfesionAvgAggregateOutputType | null
    _sum: ProfesionSumAggregateOutputType | null
    _min: ProfesionMinAggregateOutputType | null
    _max: ProfesionMaxAggregateOutputType | null
  }

  type GetProfesionGroupByPayload<T extends ProfesionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfesionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfesionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfesionGroupByOutputType[P]>
            : GetScalarType<T[P], ProfesionGroupByOutputType[P]>
        }
      >
    >


  export type ProfesionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    activo?: boolean
    colaboradores?: boolean | Profesion$colaboradoresArgs<ExtArgs>
    _count?: boolean | ProfesionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profesion"]>

  export type ProfesionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    activo?: boolean
  }, ExtArgs["result"]["profesion"]>

  export type ProfesionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    activo?: boolean
  }, ExtArgs["result"]["profesion"]>

  export type ProfesionSelectScalar = {
    id?: boolean
    nombre?: boolean
    activo?: boolean
  }

  export type ProfesionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "activo", ExtArgs["result"]["profesion"]>
  export type ProfesionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaboradores?: boolean | Profesion$colaboradoresArgs<ExtArgs>
    _count?: boolean | ProfesionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProfesionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProfesionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProfesionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profesion"
    objects: {
      colaboradores: Prisma.$ColaboradorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      activo: boolean
    }, ExtArgs["result"]["profesion"]>
    composites: {}
  }

  type ProfesionGetPayload<S extends boolean | null | undefined | ProfesionDefaultArgs> = $Result.GetResult<Prisma.$ProfesionPayload, S>

  type ProfesionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfesionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfesionCountAggregateInputType | true
    }

  export interface ProfesionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profesion'], meta: { name: 'Profesion' } }
    /**
     * Find zero or one Profesion that matches the filter.
     * @param {ProfesionFindUniqueArgs} args - Arguments to find a Profesion
     * @example
     * // Get one Profesion
     * const profesion = await prisma.profesion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfesionFindUniqueArgs>(args: SelectSubset<T, ProfesionFindUniqueArgs<ExtArgs>>): Prisma__ProfesionClient<$Result.GetResult<Prisma.$ProfesionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Profesion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfesionFindUniqueOrThrowArgs} args - Arguments to find a Profesion
     * @example
     * // Get one Profesion
     * const profesion = await prisma.profesion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfesionFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfesionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfesionClient<$Result.GetResult<Prisma.$ProfesionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profesion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfesionFindFirstArgs} args - Arguments to find a Profesion
     * @example
     * // Get one Profesion
     * const profesion = await prisma.profesion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfesionFindFirstArgs>(args?: SelectSubset<T, ProfesionFindFirstArgs<ExtArgs>>): Prisma__ProfesionClient<$Result.GetResult<Prisma.$ProfesionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profesion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfesionFindFirstOrThrowArgs} args - Arguments to find a Profesion
     * @example
     * // Get one Profesion
     * const profesion = await prisma.profesion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfesionFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfesionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfesionClient<$Result.GetResult<Prisma.$ProfesionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Profesions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfesionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profesions
     * const profesions = await prisma.profesion.findMany()
     * 
     * // Get first 10 Profesions
     * const profesions = await prisma.profesion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profesionWithIdOnly = await prisma.profesion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfesionFindManyArgs>(args?: SelectSubset<T, ProfesionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfesionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Profesion.
     * @param {ProfesionCreateArgs} args - Arguments to create a Profesion.
     * @example
     * // Create one Profesion
     * const Profesion = await prisma.profesion.create({
     *   data: {
     *     // ... data to create a Profesion
     *   }
     * })
     * 
     */
    create<T extends ProfesionCreateArgs>(args: SelectSubset<T, ProfesionCreateArgs<ExtArgs>>): Prisma__ProfesionClient<$Result.GetResult<Prisma.$ProfesionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Profesions.
     * @param {ProfesionCreateManyArgs} args - Arguments to create many Profesions.
     * @example
     * // Create many Profesions
     * const profesion = await prisma.profesion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfesionCreateManyArgs>(args?: SelectSubset<T, ProfesionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Profesions and returns the data saved in the database.
     * @param {ProfesionCreateManyAndReturnArgs} args - Arguments to create many Profesions.
     * @example
     * // Create many Profesions
     * const profesion = await prisma.profesion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Profesions and only return the `id`
     * const profesionWithIdOnly = await prisma.profesion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfesionCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfesionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfesionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Profesion.
     * @param {ProfesionDeleteArgs} args - Arguments to delete one Profesion.
     * @example
     * // Delete one Profesion
     * const Profesion = await prisma.profesion.delete({
     *   where: {
     *     // ... filter to delete one Profesion
     *   }
     * })
     * 
     */
    delete<T extends ProfesionDeleteArgs>(args: SelectSubset<T, ProfesionDeleteArgs<ExtArgs>>): Prisma__ProfesionClient<$Result.GetResult<Prisma.$ProfesionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Profesion.
     * @param {ProfesionUpdateArgs} args - Arguments to update one Profesion.
     * @example
     * // Update one Profesion
     * const profesion = await prisma.profesion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfesionUpdateArgs>(args: SelectSubset<T, ProfesionUpdateArgs<ExtArgs>>): Prisma__ProfesionClient<$Result.GetResult<Prisma.$ProfesionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Profesions.
     * @param {ProfesionDeleteManyArgs} args - Arguments to filter Profesions to delete.
     * @example
     * // Delete a few Profesions
     * const { count } = await prisma.profesion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfesionDeleteManyArgs>(args?: SelectSubset<T, ProfesionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profesions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfesionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profesions
     * const profesion = await prisma.profesion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfesionUpdateManyArgs>(args: SelectSubset<T, ProfesionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profesions and returns the data updated in the database.
     * @param {ProfesionUpdateManyAndReturnArgs} args - Arguments to update many Profesions.
     * @example
     * // Update many Profesions
     * const profesion = await prisma.profesion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Profesions and only return the `id`
     * const profesionWithIdOnly = await prisma.profesion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfesionUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfesionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfesionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Profesion.
     * @param {ProfesionUpsertArgs} args - Arguments to update or create a Profesion.
     * @example
     * // Update or create a Profesion
     * const profesion = await prisma.profesion.upsert({
     *   create: {
     *     // ... data to create a Profesion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profesion we want to update
     *   }
     * })
     */
    upsert<T extends ProfesionUpsertArgs>(args: SelectSubset<T, ProfesionUpsertArgs<ExtArgs>>): Prisma__ProfesionClient<$Result.GetResult<Prisma.$ProfesionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Profesions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfesionCountArgs} args - Arguments to filter Profesions to count.
     * @example
     * // Count the number of Profesions
     * const count = await prisma.profesion.count({
     *   where: {
     *     // ... the filter for the Profesions we want to count
     *   }
     * })
    **/
    count<T extends ProfesionCountArgs>(
      args?: Subset<T, ProfesionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfesionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profesion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfesionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfesionAggregateArgs>(args: Subset<T, ProfesionAggregateArgs>): Prisma.PrismaPromise<GetProfesionAggregateType<T>>

    /**
     * Group by Profesion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfesionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfesionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfesionGroupByArgs['orderBy'] }
        : { orderBy?: ProfesionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfesionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfesionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profesion model
   */
  readonly fields: ProfesionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profesion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfesionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    colaboradores<T extends Profesion$colaboradoresArgs<ExtArgs> = {}>(args?: Subset<T, Profesion$colaboradoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profesion model
   */
  interface ProfesionFieldRefs {
    readonly id: FieldRef<"Profesion", 'Int'>
    readonly nombre: FieldRef<"Profesion", 'String'>
    readonly activo: FieldRef<"Profesion", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Profesion findUnique
   */
  export type ProfesionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profesion
     */
    select?: ProfesionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profesion
     */
    omit?: ProfesionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfesionInclude<ExtArgs> | null
    /**
     * Filter, which Profesion to fetch.
     */
    where: ProfesionWhereUniqueInput
  }

  /**
   * Profesion findUniqueOrThrow
   */
  export type ProfesionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profesion
     */
    select?: ProfesionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profesion
     */
    omit?: ProfesionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfesionInclude<ExtArgs> | null
    /**
     * Filter, which Profesion to fetch.
     */
    where: ProfesionWhereUniqueInput
  }

  /**
   * Profesion findFirst
   */
  export type ProfesionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profesion
     */
    select?: ProfesionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profesion
     */
    omit?: ProfesionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfesionInclude<ExtArgs> | null
    /**
     * Filter, which Profesion to fetch.
     */
    where?: ProfesionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profesions to fetch.
     */
    orderBy?: ProfesionOrderByWithRelationInput | ProfesionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profesions.
     */
    cursor?: ProfesionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profesions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profesions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profesions.
     */
    distinct?: ProfesionScalarFieldEnum | ProfesionScalarFieldEnum[]
  }

  /**
   * Profesion findFirstOrThrow
   */
  export type ProfesionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profesion
     */
    select?: ProfesionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profesion
     */
    omit?: ProfesionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfesionInclude<ExtArgs> | null
    /**
     * Filter, which Profesion to fetch.
     */
    where?: ProfesionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profesions to fetch.
     */
    orderBy?: ProfesionOrderByWithRelationInput | ProfesionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profesions.
     */
    cursor?: ProfesionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profesions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profesions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profesions.
     */
    distinct?: ProfesionScalarFieldEnum | ProfesionScalarFieldEnum[]
  }

  /**
   * Profesion findMany
   */
  export type ProfesionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profesion
     */
    select?: ProfesionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profesion
     */
    omit?: ProfesionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfesionInclude<ExtArgs> | null
    /**
     * Filter, which Profesions to fetch.
     */
    where?: ProfesionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profesions to fetch.
     */
    orderBy?: ProfesionOrderByWithRelationInput | ProfesionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profesions.
     */
    cursor?: ProfesionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profesions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profesions.
     */
    skip?: number
    distinct?: ProfesionScalarFieldEnum | ProfesionScalarFieldEnum[]
  }

  /**
   * Profesion create
   */
  export type ProfesionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profesion
     */
    select?: ProfesionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profesion
     */
    omit?: ProfesionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfesionInclude<ExtArgs> | null
    /**
     * The data needed to create a Profesion.
     */
    data: XOR<ProfesionCreateInput, ProfesionUncheckedCreateInput>
  }

  /**
   * Profesion createMany
   */
  export type ProfesionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profesions.
     */
    data: ProfesionCreateManyInput | ProfesionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profesion createManyAndReturn
   */
  export type ProfesionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profesion
     */
    select?: ProfesionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profesion
     */
    omit?: ProfesionOmit<ExtArgs> | null
    /**
     * The data used to create many Profesions.
     */
    data: ProfesionCreateManyInput | ProfesionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profesion update
   */
  export type ProfesionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profesion
     */
    select?: ProfesionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profesion
     */
    omit?: ProfesionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfesionInclude<ExtArgs> | null
    /**
     * The data needed to update a Profesion.
     */
    data: XOR<ProfesionUpdateInput, ProfesionUncheckedUpdateInput>
    /**
     * Choose, which Profesion to update.
     */
    where: ProfesionWhereUniqueInput
  }

  /**
   * Profesion updateMany
   */
  export type ProfesionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profesions.
     */
    data: XOR<ProfesionUpdateManyMutationInput, ProfesionUncheckedUpdateManyInput>
    /**
     * Filter which Profesions to update
     */
    where?: ProfesionWhereInput
    /**
     * Limit how many Profesions to update.
     */
    limit?: number
  }

  /**
   * Profesion updateManyAndReturn
   */
  export type ProfesionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profesion
     */
    select?: ProfesionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profesion
     */
    omit?: ProfesionOmit<ExtArgs> | null
    /**
     * The data used to update Profesions.
     */
    data: XOR<ProfesionUpdateManyMutationInput, ProfesionUncheckedUpdateManyInput>
    /**
     * Filter which Profesions to update
     */
    where?: ProfesionWhereInput
    /**
     * Limit how many Profesions to update.
     */
    limit?: number
  }

  /**
   * Profesion upsert
   */
  export type ProfesionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profesion
     */
    select?: ProfesionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profesion
     */
    omit?: ProfesionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfesionInclude<ExtArgs> | null
    /**
     * The filter to search for the Profesion to update in case it exists.
     */
    where: ProfesionWhereUniqueInput
    /**
     * In case the Profesion found by the `where` argument doesn't exist, create a new Profesion with this data.
     */
    create: XOR<ProfesionCreateInput, ProfesionUncheckedCreateInput>
    /**
     * In case the Profesion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfesionUpdateInput, ProfesionUncheckedUpdateInput>
  }

  /**
   * Profesion delete
   */
  export type ProfesionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profesion
     */
    select?: ProfesionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profesion
     */
    omit?: ProfesionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfesionInclude<ExtArgs> | null
    /**
     * Filter which Profesion to delete.
     */
    where: ProfesionWhereUniqueInput
  }

  /**
   * Profesion deleteMany
   */
  export type ProfesionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profesions to delete
     */
    where?: ProfesionWhereInput
    /**
     * Limit how many Profesions to delete.
     */
    limit?: number
  }

  /**
   * Profesion.colaboradores
   */
  export type Profesion$colaboradoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Colaborador
     */
    omit?: ColaboradorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    where?: ColaboradorWhereInput
    orderBy?: ColaboradorOrderByWithRelationInput | ColaboradorOrderByWithRelationInput[]
    cursor?: ColaboradorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ColaboradorScalarFieldEnum | ColaboradorScalarFieldEnum[]
  }

  /**
   * Profesion without action
   */
  export type ProfesionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profesion
     */
    select?: ProfesionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profesion
     */
    omit?: ProfesionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfesionInclude<ExtArgs> | null
  }


  /**
   * Model EstadoCivil
   */

  export type AggregateEstadoCivil = {
    _count: EstadoCivilCountAggregateOutputType | null
    _avg: EstadoCivilAvgAggregateOutputType | null
    _sum: EstadoCivilSumAggregateOutputType | null
    _min: EstadoCivilMinAggregateOutputType | null
    _max: EstadoCivilMaxAggregateOutputType | null
  }

  export type EstadoCivilAvgAggregateOutputType = {
    id: number | null
  }

  export type EstadoCivilSumAggregateOutputType = {
    id: number | null
  }

  export type EstadoCivilMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    activo: boolean | null
  }

  export type EstadoCivilMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    activo: boolean | null
  }

  export type EstadoCivilCountAggregateOutputType = {
    id: number
    nombre: number
    activo: number
    _all: number
  }


  export type EstadoCivilAvgAggregateInputType = {
    id?: true
  }

  export type EstadoCivilSumAggregateInputType = {
    id?: true
  }

  export type EstadoCivilMinAggregateInputType = {
    id?: true
    nombre?: true
    activo?: true
  }

  export type EstadoCivilMaxAggregateInputType = {
    id?: true
    nombre?: true
    activo?: true
  }

  export type EstadoCivilCountAggregateInputType = {
    id?: true
    nombre?: true
    activo?: true
    _all?: true
  }

  export type EstadoCivilAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EstadoCivil to aggregate.
     */
    where?: EstadoCivilWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EstadoCivils to fetch.
     */
    orderBy?: EstadoCivilOrderByWithRelationInput | EstadoCivilOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EstadoCivilWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EstadoCivils from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EstadoCivils.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EstadoCivils
    **/
    _count?: true | EstadoCivilCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EstadoCivilAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EstadoCivilSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EstadoCivilMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EstadoCivilMaxAggregateInputType
  }

  export type GetEstadoCivilAggregateType<T extends EstadoCivilAggregateArgs> = {
        [P in keyof T & keyof AggregateEstadoCivil]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEstadoCivil[P]>
      : GetScalarType<T[P], AggregateEstadoCivil[P]>
  }




  export type EstadoCivilGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EstadoCivilWhereInput
    orderBy?: EstadoCivilOrderByWithAggregationInput | EstadoCivilOrderByWithAggregationInput[]
    by: EstadoCivilScalarFieldEnum[] | EstadoCivilScalarFieldEnum
    having?: EstadoCivilScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EstadoCivilCountAggregateInputType | true
    _avg?: EstadoCivilAvgAggregateInputType
    _sum?: EstadoCivilSumAggregateInputType
    _min?: EstadoCivilMinAggregateInputType
    _max?: EstadoCivilMaxAggregateInputType
  }

  export type EstadoCivilGroupByOutputType = {
    id: number
    nombre: string
    activo: boolean
    _count: EstadoCivilCountAggregateOutputType | null
    _avg: EstadoCivilAvgAggregateOutputType | null
    _sum: EstadoCivilSumAggregateOutputType | null
    _min: EstadoCivilMinAggregateOutputType | null
    _max: EstadoCivilMaxAggregateOutputType | null
  }

  type GetEstadoCivilGroupByPayload<T extends EstadoCivilGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EstadoCivilGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EstadoCivilGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EstadoCivilGroupByOutputType[P]>
            : GetScalarType<T[P], EstadoCivilGroupByOutputType[P]>
        }
      >
    >


  export type EstadoCivilSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    activo?: boolean
    colaboradores?: boolean | EstadoCivil$colaboradoresArgs<ExtArgs>
    _count?: boolean | EstadoCivilCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["estadoCivil"]>

  export type EstadoCivilSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    activo?: boolean
  }, ExtArgs["result"]["estadoCivil"]>

  export type EstadoCivilSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    activo?: boolean
  }, ExtArgs["result"]["estadoCivil"]>

  export type EstadoCivilSelectScalar = {
    id?: boolean
    nombre?: boolean
    activo?: boolean
  }

  export type EstadoCivilOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "activo", ExtArgs["result"]["estadoCivil"]>
  export type EstadoCivilInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaboradores?: boolean | EstadoCivil$colaboradoresArgs<ExtArgs>
    _count?: boolean | EstadoCivilCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EstadoCivilIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EstadoCivilIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EstadoCivilPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EstadoCivil"
    objects: {
      colaboradores: Prisma.$ColaboradorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      activo: boolean
    }, ExtArgs["result"]["estadoCivil"]>
    composites: {}
  }

  type EstadoCivilGetPayload<S extends boolean | null | undefined | EstadoCivilDefaultArgs> = $Result.GetResult<Prisma.$EstadoCivilPayload, S>

  type EstadoCivilCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EstadoCivilFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EstadoCivilCountAggregateInputType | true
    }

  export interface EstadoCivilDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EstadoCivil'], meta: { name: 'EstadoCivil' } }
    /**
     * Find zero or one EstadoCivil that matches the filter.
     * @param {EstadoCivilFindUniqueArgs} args - Arguments to find a EstadoCivil
     * @example
     * // Get one EstadoCivil
     * const estadoCivil = await prisma.estadoCivil.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EstadoCivilFindUniqueArgs>(args: SelectSubset<T, EstadoCivilFindUniqueArgs<ExtArgs>>): Prisma__EstadoCivilClient<$Result.GetResult<Prisma.$EstadoCivilPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EstadoCivil that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EstadoCivilFindUniqueOrThrowArgs} args - Arguments to find a EstadoCivil
     * @example
     * // Get one EstadoCivil
     * const estadoCivil = await prisma.estadoCivil.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EstadoCivilFindUniqueOrThrowArgs>(args: SelectSubset<T, EstadoCivilFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EstadoCivilClient<$Result.GetResult<Prisma.$EstadoCivilPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EstadoCivil that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoCivilFindFirstArgs} args - Arguments to find a EstadoCivil
     * @example
     * // Get one EstadoCivil
     * const estadoCivil = await prisma.estadoCivil.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EstadoCivilFindFirstArgs>(args?: SelectSubset<T, EstadoCivilFindFirstArgs<ExtArgs>>): Prisma__EstadoCivilClient<$Result.GetResult<Prisma.$EstadoCivilPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EstadoCivil that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoCivilFindFirstOrThrowArgs} args - Arguments to find a EstadoCivil
     * @example
     * // Get one EstadoCivil
     * const estadoCivil = await prisma.estadoCivil.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EstadoCivilFindFirstOrThrowArgs>(args?: SelectSubset<T, EstadoCivilFindFirstOrThrowArgs<ExtArgs>>): Prisma__EstadoCivilClient<$Result.GetResult<Prisma.$EstadoCivilPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EstadoCivils that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoCivilFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EstadoCivils
     * const estadoCivils = await prisma.estadoCivil.findMany()
     * 
     * // Get first 10 EstadoCivils
     * const estadoCivils = await prisma.estadoCivil.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const estadoCivilWithIdOnly = await prisma.estadoCivil.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EstadoCivilFindManyArgs>(args?: SelectSubset<T, EstadoCivilFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstadoCivilPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EstadoCivil.
     * @param {EstadoCivilCreateArgs} args - Arguments to create a EstadoCivil.
     * @example
     * // Create one EstadoCivil
     * const EstadoCivil = await prisma.estadoCivil.create({
     *   data: {
     *     // ... data to create a EstadoCivil
     *   }
     * })
     * 
     */
    create<T extends EstadoCivilCreateArgs>(args: SelectSubset<T, EstadoCivilCreateArgs<ExtArgs>>): Prisma__EstadoCivilClient<$Result.GetResult<Prisma.$EstadoCivilPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EstadoCivils.
     * @param {EstadoCivilCreateManyArgs} args - Arguments to create many EstadoCivils.
     * @example
     * // Create many EstadoCivils
     * const estadoCivil = await prisma.estadoCivil.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EstadoCivilCreateManyArgs>(args?: SelectSubset<T, EstadoCivilCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EstadoCivils and returns the data saved in the database.
     * @param {EstadoCivilCreateManyAndReturnArgs} args - Arguments to create many EstadoCivils.
     * @example
     * // Create many EstadoCivils
     * const estadoCivil = await prisma.estadoCivil.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EstadoCivils and only return the `id`
     * const estadoCivilWithIdOnly = await prisma.estadoCivil.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EstadoCivilCreateManyAndReturnArgs>(args?: SelectSubset<T, EstadoCivilCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstadoCivilPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EstadoCivil.
     * @param {EstadoCivilDeleteArgs} args - Arguments to delete one EstadoCivil.
     * @example
     * // Delete one EstadoCivil
     * const EstadoCivil = await prisma.estadoCivil.delete({
     *   where: {
     *     // ... filter to delete one EstadoCivil
     *   }
     * })
     * 
     */
    delete<T extends EstadoCivilDeleteArgs>(args: SelectSubset<T, EstadoCivilDeleteArgs<ExtArgs>>): Prisma__EstadoCivilClient<$Result.GetResult<Prisma.$EstadoCivilPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EstadoCivil.
     * @param {EstadoCivilUpdateArgs} args - Arguments to update one EstadoCivil.
     * @example
     * // Update one EstadoCivil
     * const estadoCivil = await prisma.estadoCivil.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EstadoCivilUpdateArgs>(args: SelectSubset<T, EstadoCivilUpdateArgs<ExtArgs>>): Prisma__EstadoCivilClient<$Result.GetResult<Prisma.$EstadoCivilPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EstadoCivils.
     * @param {EstadoCivilDeleteManyArgs} args - Arguments to filter EstadoCivils to delete.
     * @example
     * // Delete a few EstadoCivils
     * const { count } = await prisma.estadoCivil.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EstadoCivilDeleteManyArgs>(args?: SelectSubset<T, EstadoCivilDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EstadoCivils.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoCivilUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EstadoCivils
     * const estadoCivil = await prisma.estadoCivil.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EstadoCivilUpdateManyArgs>(args: SelectSubset<T, EstadoCivilUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EstadoCivils and returns the data updated in the database.
     * @param {EstadoCivilUpdateManyAndReturnArgs} args - Arguments to update many EstadoCivils.
     * @example
     * // Update many EstadoCivils
     * const estadoCivil = await prisma.estadoCivil.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EstadoCivils and only return the `id`
     * const estadoCivilWithIdOnly = await prisma.estadoCivil.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EstadoCivilUpdateManyAndReturnArgs>(args: SelectSubset<T, EstadoCivilUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstadoCivilPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EstadoCivil.
     * @param {EstadoCivilUpsertArgs} args - Arguments to update or create a EstadoCivil.
     * @example
     * // Update or create a EstadoCivil
     * const estadoCivil = await prisma.estadoCivil.upsert({
     *   create: {
     *     // ... data to create a EstadoCivil
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EstadoCivil we want to update
     *   }
     * })
     */
    upsert<T extends EstadoCivilUpsertArgs>(args: SelectSubset<T, EstadoCivilUpsertArgs<ExtArgs>>): Prisma__EstadoCivilClient<$Result.GetResult<Prisma.$EstadoCivilPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EstadoCivils.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoCivilCountArgs} args - Arguments to filter EstadoCivils to count.
     * @example
     * // Count the number of EstadoCivils
     * const count = await prisma.estadoCivil.count({
     *   where: {
     *     // ... the filter for the EstadoCivils we want to count
     *   }
     * })
    **/
    count<T extends EstadoCivilCountArgs>(
      args?: Subset<T, EstadoCivilCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EstadoCivilCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EstadoCivil.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoCivilAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EstadoCivilAggregateArgs>(args: Subset<T, EstadoCivilAggregateArgs>): Prisma.PrismaPromise<GetEstadoCivilAggregateType<T>>

    /**
     * Group by EstadoCivil.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoCivilGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EstadoCivilGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EstadoCivilGroupByArgs['orderBy'] }
        : { orderBy?: EstadoCivilGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EstadoCivilGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEstadoCivilGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EstadoCivil model
   */
  readonly fields: EstadoCivilFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EstadoCivil.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EstadoCivilClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    colaboradores<T extends EstadoCivil$colaboradoresArgs<ExtArgs> = {}>(args?: Subset<T, EstadoCivil$colaboradoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EstadoCivil model
   */
  interface EstadoCivilFieldRefs {
    readonly id: FieldRef<"EstadoCivil", 'Int'>
    readonly nombre: FieldRef<"EstadoCivil", 'String'>
    readonly activo: FieldRef<"EstadoCivil", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * EstadoCivil findUnique
   */
  export type EstadoCivilFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstadoCivil
     */
    select?: EstadoCivilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstadoCivil
     */
    omit?: EstadoCivilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoCivilInclude<ExtArgs> | null
    /**
     * Filter, which EstadoCivil to fetch.
     */
    where: EstadoCivilWhereUniqueInput
  }

  /**
   * EstadoCivil findUniqueOrThrow
   */
  export type EstadoCivilFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstadoCivil
     */
    select?: EstadoCivilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstadoCivil
     */
    omit?: EstadoCivilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoCivilInclude<ExtArgs> | null
    /**
     * Filter, which EstadoCivil to fetch.
     */
    where: EstadoCivilWhereUniqueInput
  }

  /**
   * EstadoCivil findFirst
   */
  export type EstadoCivilFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstadoCivil
     */
    select?: EstadoCivilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstadoCivil
     */
    omit?: EstadoCivilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoCivilInclude<ExtArgs> | null
    /**
     * Filter, which EstadoCivil to fetch.
     */
    where?: EstadoCivilWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EstadoCivils to fetch.
     */
    orderBy?: EstadoCivilOrderByWithRelationInput | EstadoCivilOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EstadoCivils.
     */
    cursor?: EstadoCivilWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EstadoCivils from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EstadoCivils.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EstadoCivils.
     */
    distinct?: EstadoCivilScalarFieldEnum | EstadoCivilScalarFieldEnum[]
  }

  /**
   * EstadoCivil findFirstOrThrow
   */
  export type EstadoCivilFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstadoCivil
     */
    select?: EstadoCivilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstadoCivil
     */
    omit?: EstadoCivilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoCivilInclude<ExtArgs> | null
    /**
     * Filter, which EstadoCivil to fetch.
     */
    where?: EstadoCivilWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EstadoCivils to fetch.
     */
    orderBy?: EstadoCivilOrderByWithRelationInput | EstadoCivilOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EstadoCivils.
     */
    cursor?: EstadoCivilWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EstadoCivils from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EstadoCivils.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EstadoCivils.
     */
    distinct?: EstadoCivilScalarFieldEnum | EstadoCivilScalarFieldEnum[]
  }

  /**
   * EstadoCivil findMany
   */
  export type EstadoCivilFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstadoCivil
     */
    select?: EstadoCivilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstadoCivil
     */
    omit?: EstadoCivilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoCivilInclude<ExtArgs> | null
    /**
     * Filter, which EstadoCivils to fetch.
     */
    where?: EstadoCivilWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EstadoCivils to fetch.
     */
    orderBy?: EstadoCivilOrderByWithRelationInput | EstadoCivilOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EstadoCivils.
     */
    cursor?: EstadoCivilWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EstadoCivils from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EstadoCivils.
     */
    skip?: number
    distinct?: EstadoCivilScalarFieldEnum | EstadoCivilScalarFieldEnum[]
  }

  /**
   * EstadoCivil create
   */
  export type EstadoCivilCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstadoCivil
     */
    select?: EstadoCivilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstadoCivil
     */
    omit?: EstadoCivilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoCivilInclude<ExtArgs> | null
    /**
     * The data needed to create a EstadoCivil.
     */
    data: XOR<EstadoCivilCreateInput, EstadoCivilUncheckedCreateInput>
  }

  /**
   * EstadoCivil createMany
   */
  export type EstadoCivilCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EstadoCivils.
     */
    data: EstadoCivilCreateManyInput | EstadoCivilCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EstadoCivil createManyAndReturn
   */
  export type EstadoCivilCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstadoCivil
     */
    select?: EstadoCivilSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EstadoCivil
     */
    omit?: EstadoCivilOmit<ExtArgs> | null
    /**
     * The data used to create many EstadoCivils.
     */
    data: EstadoCivilCreateManyInput | EstadoCivilCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EstadoCivil update
   */
  export type EstadoCivilUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstadoCivil
     */
    select?: EstadoCivilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstadoCivil
     */
    omit?: EstadoCivilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoCivilInclude<ExtArgs> | null
    /**
     * The data needed to update a EstadoCivil.
     */
    data: XOR<EstadoCivilUpdateInput, EstadoCivilUncheckedUpdateInput>
    /**
     * Choose, which EstadoCivil to update.
     */
    where: EstadoCivilWhereUniqueInput
  }

  /**
   * EstadoCivil updateMany
   */
  export type EstadoCivilUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EstadoCivils.
     */
    data: XOR<EstadoCivilUpdateManyMutationInput, EstadoCivilUncheckedUpdateManyInput>
    /**
     * Filter which EstadoCivils to update
     */
    where?: EstadoCivilWhereInput
    /**
     * Limit how many EstadoCivils to update.
     */
    limit?: number
  }

  /**
   * EstadoCivil updateManyAndReturn
   */
  export type EstadoCivilUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstadoCivil
     */
    select?: EstadoCivilSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EstadoCivil
     */
    omit?: EstadoCivilOmit<ExtArgs> | null
    /**
     * The data used to update EstadoCivils.
     */
    data: XOR<EstadoCivilUpdateManyMutationInput, EstadoCivilUncheckedUpdateManyInput>
    /**
     * Filter which EstadoCivils to update
     */
    where?: EstadoCivilWhereInput
    /**
     * Limit how many EstadoCivils to update.
     */
    limit?: number
  }

  /**
   * EstadoCivil upsert
   */
  export type EstadoCivilUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstadoCivil
     */
    select?: EstadoCivilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstadoCivil
     */
    omit?: EstadoCivilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoCivilInclude<ExtArgs> | null
    /**
     * The filter to search for the EstadoCivil to update in case it exists.
     */
    where: EstadoCivilWhereUniqueInput
    /**
     * In case the EstadoCivil found by the `where` argument doesn't exist, create a new EstadoCivil with this data.
     */
    create: XOR<EstadoCivilCreateInput, EstadoCivilUncheckedCreateInput>
    /**
     * In case the EstadoCivil was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EstadoCivilUpdateInput, EstadoCivilUncheckedUpdateInput>
  }

  /**
   * EstadoCivil delete
   */
  export type EstadoCivilDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstadoCivil
     */
    select?: EstadoCivilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstadoCivil
     */
    omit?: EstadoCivilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoCivilInclude<ExtArgs> | null
    /**
     * Filter which EstadoCivil to delete.
     */
    where: EstadoCivilWhereUniqueInput
  }

  /**
   * EstadoCivil deleteMany
   */
  export type EstadoCivilDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EstadoCivils to delete
     */
    where?: EstadoCivilWhereInput
    /**
     * Limit how many EstadoCivils to delete.
     */
    limit?: number
  }

  /**
   * EstadoCivil.colaboradores
   */
  export type EstadoCivil$colaboradoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Colaborador
     */
    omit?: ColaboradorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    where?: ColaboradorWhereInput
    orderBy?: ColaboradorOrderByWithRelationInput | ColaboradorOrderByWithRelationInput[]
    cursor?: ColaboradorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ColaboradorScalarFieldEnum | ColaboradorScalarFieldEnum[]
  }

  /**
   * EstadoCivil without action
   */
  export type EstadoCivilDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstadoCivil
     */
    select?: EstadoCivilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EstadoCivil
     */
    omit?: EstadoCivilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoCivilInclude<ExtArgs> | null
  }


  /**
   * Model Area
   */

  export type AggregateArea = {
    _count: AreaCountAggregateOutputType | null
    _avg: AreaAvgAggregateOutputType | null
    _sum: AreaSumAggregateOutputType | null
    _min: AreaMinAggregateOutputType | null
    _max: AreaMaxAggregateOutputType | null
  }

  export type AreaAvgAggregateOutputType = {
    id: number | null
  }

  export type AreaSumAggregateOutputType = {
    id: number | null
  }

  export type AreaMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    activo: boolean | null
  }

  export type AreaMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    activo: boolean | null
  }

  export type AreaCountAggregateOutputType = {
    id: number
    nombre: number
    activo: number
    _all: number
  }


  export type AreaAvgAggregateInputType = {
    id?: true
  }

  export type AreaSumAggregateInputType = {
    id?: true
  }

  export type AreaMinAggregateInputType = {
    id?: true
    nombre?: true
    activo?: true
  }

  export type AreaMaxAggregateInputType = {
    id?: true
    nombre?: true
    activo?: true
  }

  export type AreaCountAggregateInputType = {
    id?: true
    nombre?: true
    activo?: true
    _all?: true
  }

  export type AreaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Area to aggregate.
     */
    where?: AreaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Areas to fetch.
     */
    orderBy?: AreaOrderByWithRelationInput | AreaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AreaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Areas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Areas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Areas
    **/
    _count?: true | AreaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AreaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AreaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AreaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AreaMaxAggregateInputType
  }

  export type GetAreaAggregateType<T extends AreaAggregateArgs> = {
        [P in keyof T & keyof AggregateArea]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArea[P]>
      : GetScalarType<T[P], AggregateArea[P]>
  }




  export type AreaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AreaWhereInput
    orderBy?: AreaOrderByWithAggregationInput | AreaOrderByWithAggregationInput[]
    by: AreaScalarFieldEnum[] | AreaScalarFieldEnum
    having?: AreaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AreaCountAggregateInputType | true
    _avg?: AreaAvgAggregateInputType
    _sum?: AreaSumAggregateInputType
    _min?: AreaMinAggregateInputType
    _max?: AreaMaxAggregateInputType
  }

  export type AreaGroupByOutputType = {
    id: number
    nombre: string
    activo: boolean
    _count: AreaCountAggregateOutputType | null
    _avg: AreaAvgAggregateOutputType | null
    _sum: AreaSumAggregateOutputType | null
    _min: AreaMinAggregateOutputType | null
    _max: AreaMaxAggregateOutputType | null
  }

  type GetAreaGroupByPayload<T extends AreaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AreaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AreaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AreaGroupByOutputType[P]>
            : GetScalarType<T[P], AreaGroupByOutputType[P]>
        }
      >
    >


  export type AreaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    activo?: boolean
    colaboradores?: boolean | Area$colaboradoresArgs<ExtArgs>
    _count?: boolean | AreaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["area"]>

  export type AreaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    activo?: boolean
  }, ExtArgs["result"]["area"]>

  export type AreaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    activo?: boolean
  }, ExtArgs["result"]["area"]>

  export type AreaSelectScalar = {
    id?: boolean
    nombre?: boolean
    activo?: boolean
  }

  export type AreaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "activo", ExtArgs["result"]["area"]>
  export type AreaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaboradores?: boolean | Area$colaboradoresArgs<ExtArgs>
    _count?: boolean | AreaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AreaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AreaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AreaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Area"
    objects: {
      colaboradores: Prisma.$ColaboradorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      activo: boolean
    }, ExtArgs["result"]["area"]>
    composites: {}
  }

  type AreaGetPayload<S extends boolean | null | undefined | AreaDefaultArgs> = $Result.GetResult<Prisma.$AreaPayload, S>

  type AreaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AreaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AreaCountAggregateInputType | true
    }

  export interface AreaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Area'], meta: { name: 'Area' } }
    /**
     * Find zero or one Area that matches the filter.
     * @param {AreaFindUniqueArgs} args - Arguments to find a Area
     * @example
     * // Get one Area
     * const area = await prisma.area.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AreaFindUniqueArgs>(args: SelectSubset<T, AreaFindUniqueArgs<ExtArgs>>): Prisma__AreaClient<$Result.GetResult<Prisma.$AreaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Area that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AreaFindUniqueOrThrowArgs} args - Arguments to find a Area
     * @example
     * // Get one Area
     * const area = await prisma.area.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AreaFindUniqueOrThrowArgs>(args: SelectSubset<T, AreaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AreaClient<$Result.GetResult<Prisma.$AreaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Area that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AreaFindFirstArgs} args - Arguments to find a Area
     * @example
     * // Get one Area
     * const area = await prisma.area.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AreaFindFirstArgs>(args?: SelectSubset<T, AreaFindFirstArgs<ExtArgs>>): Prisma__AreaClient<$Result.GetResult<Prisma.$AreaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Area that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AreaFindFirstOrThrowArgs} args - Arguments to find a Area
     * @example
     * // Get one Area
     * const area = await prisma.area.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AreaFindFirstOrThrowArgs>(args?: SelectSubset<T, AreaFindFirstOrThrowArgs<ExtArgs>>): Prisma__AreaClient<$Result.GetResult<Prisma.$AreaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Areas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AreaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Areas
     * const areas = await prisma.area.findMany()
     * 
     * // Get first 10 Areas
     * const areas = await prisma.area.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const areaWithIdOnly = await prisma.area.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AreaFindManyArgs>(args?: SelectSubset<T, AreaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AreaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Area.
     * @param {AreaCreateArgs} args - Arguments to create a Area.
     * @example
     * // Create one Area
     * const Area = await prisma.area.create({
     *   data: {
     *     // ... data to create a Area
     *   }
     * })
     * 
     */
    create<T extends AreaCreateArgs>(args: SelectSubset<T, AreaCreateArgs<ExtArgs>>): Prisma__AreaClient<$Result.GetResult<Prisma.$AreaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Areas.
     * @param {AreaCreateManyArgs} args - Arguments to create many Areas.
     * @example
     * // Create many Areas
     * const area = await prisma.area.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AreaCreateManyArgs>(args?: SelectSubset<T, AreaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Areas and returns the data saved in the database.
     * @param {AreaCreateManyAndReturnArgs} args - Arguments to create many Areas.
     * @example
     * // Create many Areas
     * const area = await prisma.area.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Areas and only return the `id`
     * const areaWithIdOnly = await prisma.area.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AreaCreateManyAndReturnArgs>(args?: SelectSubset<T, AreaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AreaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Area.
     * @param {AreaDeleteArgs} args - Arguments to delete one Area.
     * @example
     * // Delete one Area
     * const Area = await prisma.area.delete({
     *   where: {
     *     // ... filter to delete one Area
     *   }
     * })
     * 
     */
    delete<T extends AreaDeleteArgs>(args: SelectSubset<T, AreaDeleteArgs<ExtArgs>>): Prisma__AreaClient<$Result.GetResult<Prisma.$AreaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Area.
     * @param {AreaUpdateArgs} args - Arguments to update one Area.
     * @example
     * // Update one Area
     * const area = await prisma.area.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AreaUpdateArgs>(args: SelectSubset<T, AreaUpdateArgs<ExtArgs>>): Prisma__AreaClient<$Result.GetResult<Prisma.$AreaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Areas.
     * @param {AreaDeleteManyArgs} args - Arguments to filter Areas to delete.
     * @example
     * // Delete a few Areas
     * const { count } = await prisma.area.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AreaDeleteManyArgs>(args?: SelectSubset<T, AreaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Areas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AreaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Areas
     * const area = await prisma.area.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AreaUpdateManyArgs>(args: SelectSubset<T, AreaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Areas and returns the data updated in the database.
     * @param {AreaUpdateManyAndReturnArgs} args - Arguments to update many Areas.
     * @example
     * // Update many Areas
     * const area = await prisma.area.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Areas and only return the `id`
     * const areaWithIdOnly = await prisma.area.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AreaUpdateManyAndReturnArgs>(args: SelectSubset<T, AreaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AreaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Area.
     * @param {AreaUpsertArgs} args - Arguments to update or create a Area.
     * @example
     * // Update or create a Area
     * const area = await prisma.area.upsert({
     *   create: {
     *     // ... data to create a Area
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Area we want to update
     *   }
     * })
     */
    upsert<T extends AreaUpsertArgs>(args: SelectSubset<T, AreaUpsertArgs<ExtArgs>>): Prisma__AreaClient<$Result.GetResult<Prisma.$AreaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Areas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AreaCountArgs} args - Arguments to filter Areas to count.
     * @example
     * // Count the number of Areas
     * const count = await prisma.area.count({
     *   where: {
     *     // ... the filter for the Areas we want to count
     *   }
     * })
    **/
    count<T extends AreaCountArgs>(
      args?: Subset<T, AreaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AreaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Area.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AreaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AreaAggregateArgs>(args: Subset<T, AreaAggregateArgs>): Prisma.PrismaPromise<GetAreaAggregateType<T>>

    /**
     * Group by Area.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AreaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AreaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AreaGroupByArgs['orderBy'] }
        : { orderBy?: AreaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AreaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAreaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Area model
   */
  readonly fields: AreaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Area.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AreaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    colaboradores<T extends Area$colaboradoresArgs<ExtArgs> = {}>(args?: Subset<T, Area$colaboradoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Area model
   */
  interface AreaFieldRefs {
    readonly id: FieldRef<"Area", 'Int'>
    readonly nombre: FieldRef<"Area", 'String'>
    readonly activo: FieldRef<"Area", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Area findUnique
   */
  export type AreaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Area
     */
    select?: AreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Area
     */
    omit?: AreaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AreaInclude<ExtArgs> | null
    /**
     * Filter, which Area to fetch.
     */
    where: AreaWhereUniqueInput
  }

  /**
   * Area findUniqueOrThrow
   */
  export type AreaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Area
     */
    select?: AreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Area
     */
    omit?: AreaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AreaInclude<ExtArgs> | null
    /**
     * Filter, which Area to fetch.
     */
    where: AreaWhereUniqueInput
  }

  /**
   * Area findFirst
   */
  export type AreaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Area
     */
    select?: AreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Area
     */
    omit?: AreaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AreaInclude<ExtArgs> | null
    /**
     * Filter, which Area to fetch.
     */
    where?: AreaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Areas to fetch.
     */
    orderBy?: AreaOrderByWithRelationInput | AreaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Areas.
     */
    cursor?: AreaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Areas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Areas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Areas.
     */
    distinct?: AreaScalarFieldEnum | AreaScalarFieldEnum[]
  }

  /**
   * Area findFirstOrThrow
   */
  export type AreaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Area
     */
    select?: AreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Area
     */
    omit?: AreaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AreaInclude<ExtArgs> | null
    /**
     * Filter, which Area to fetch.
     */
    where?: AreaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Areas to fetch.
     */
    orderBy?: AreaOrderByWithRelationInput | AreaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Areas.
     */
    cursor?: AreaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Areas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Areas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Areas.
     */
    distinct?: AreaScalarFieldEnum | AreaScalarFieldEnum[]
  }

  /**
   * Area findMany
   */
  export type AreaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Area
     */
    select?: AreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Area
     */
    omit?: AreaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AreaInclude<ExtArgs> | null
    /**
     * Filter, which Areas to fetch.
     */
    where?: AreaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Areas to fetch.
     */
    orderBy?: AreaOrderByWithRelationInput | AreaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Areas.
     */
    cursor?: AreaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Areas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Areas.
     */
    skip?: number
    distinct?: AreaScalarFieldEnum | AreaScalarFieldEnum[]
  }

  /**
   * Area create
   */
  export type AreaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Area
     */
    select?: AreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Area
     */
    omit?: AreaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AreaInclude<ExtArgs> | null
    /**
     * The data needed to create a Area.
     */
    data: XOR<AreaCreateInput, AreaUncheckedCreateInput>
  }

  /**
   * Area createMany
   */
  export type AreaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Areas.
     */
    data: AreaCreateManyInput | AreaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Area createManyAndReturn
   */
  export type AreaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Area
     */
    select?: AreaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Area
     */
    omit?: AreaOmit<ExtArgs> | null
    /**
     * The data used to create many Areas.
     */
    data: AreaCreateManyInput | AreaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Area update
   */
  export type AreaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Area
     */
    select?: AreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Area
     */
    omit?: AreaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AreaInclude<ExtArgs> | null
    /**
     * The data needed to update a Area.
     */
    data: XOR<AreaUpdateInput, AreaUncheckedUpdateInput>
    /**
     * Choose, which Area to update.
     */
    where: AreaWhereUniqueInput
  }

  /**
   * Area updateMany
   */
  export type AreaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Areas.
     */
    data: XOR<AreaUpdateManyMutationInput, AreaUncheckedUpdateManyInput>
    /**
     * Filter which Areas to update
     */
    where?: AreaWhereInput
    /**
     * Limit how many Areas to update.
     */
    limit?: number
  }

  /**
   * Area updateManyAndReturn
   */
  export type AreaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Area
     */
    select?: AreaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Area
     */
    omit?: AreaOmit<ExtArgs> | null
    /**
     * The data used to update Areas.
     */
    data: XOR<AreaUpdateManyMutationInput, AreaUncheckedUpdateManyInput>
    /**
     * Filter which Areas to update
     */
    where?: AreaWhereInput
    /**
     * Limit how many Areas to update.
     */
    limit?: number
  }

  /**
   * Area upsert
   */
  export type AreaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Area
     */
    select?: AreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Area
     */
    omit?: AreaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AreaInclude<ExtArgs> | null
    /**
     * The filter to search for the Area to update in case it exists.
     */
    where: AreaWhereUniqueInput
    /**
     * In case the Area found by the `where` argument doesn't exist, create a new Area with this data.
     */
    create: XOR<AreaCreateInput, AreaUncheckedCreateInput>
    /**
     * In case the Area was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AreaUpdateInput, AreaUncheckedUpdateInput>
  }

  /**
   * Area delete
   */
  export type AreaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Area
     */
    select?: AreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Area
     */
    omit?: AreaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AreaInclude<ExtArgs> | null
    /**
     * Filter which Area to delete.
     */
    where: AreaWhereUniqueInput
  }

  /**
   * Area deleteMany
   */
  export type AreaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Areas to delete
     */
    where?: AreaWhereInput
    /**
     * Limit how many Areas to delete.
     */
    limit?: number
  }

  /**
   * Area.colaboradores
   */
  export type Area$colaboradoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Colaborador
     */
    omit?: ColaboradorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    where?: ColaboradorWhereInput
    orderBy?: ColaboradorOrderByWithRelationInput | ColaboradorOrderByWithRelationInput[]
    cursor?: ColaboradorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ColaboradorScalarFieldEnum | ColaboradorScalarFieldEnum[]
  }

  /**
   * Area without action
   */
  export type AreaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Area
     */
    select?: AreaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Area
     */
    omit?: AreaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AreaInclude<ExtArgs> | null
  }


  /**
   * Model Colaborador
   */

  export type AggregateColaborador = {
    _count: ColaboradorCountAggregateOutputType | null
    _avg: ColaboradorAvgAggregateOutputType | null
    _sum: ColaboradorSumAggregateOutputType | null
    _min: ColaboradorMinAggregateOutputType | null
    _max: ColaboradorMaxAggregateOutputType | null
  }

  export type ColaboradorAvgAggregateOutputType = {
    id: number | null
    salario: Decimal | null
    sexoId: number | null
    profesionId: number | null
    estadoCivilId: number | null
    areaId: number | null
  }

  export type ColaboradorSumAggregateOutputType = {
    id: number | null
    salario: Decimal | null
    sexoId: number | null
    profesionId: number | null
    estadoCivilId: number | null
    areaId: number | null
  }

  export type ColaboradorMinAggregateOutputType = {
    id: number | null
    numeroEmpleado: string | null
    nombre: string | null
    apellidos: string | null
    email: string | null
    telefono: string | null
    fechaNacimiento: Date | null
    fechaIngreso: Date | null
    salario: Decimal | null
    activo: boolean | null
    sexoId: number | null
    profesionId: number | null
    estadoCivilId: number | null
    areaId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ColaboradorMaxAggregateOutputType = {
    id: number | null
    numeroEmpleado: string | null
    nombre: string | null
    apellidos: string | null
    email: string | null
    telefono: string | null
    fechaNacimiento: Date | null
    fechaIngreso: Date | null
    salario: Decimal | null
    activo: boolean | null
    sexoId: number | null
    profesionId: number | null
    estadoCivilId: number | null
    areaId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ColaboradorCountAggregateOutputType = {
    id: number
    numeroEmpleado: number
    nombre: number
    apellidos: number
    email: number
    telefono: number
    fechaNacimiento: number
    fechaIngreso: number
    salario: number
    activo: number
    sexoId: number
    profesionId: number
    estadoCivilId: number
    areaId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ColaboradorAvgAggregateInputType = {
    id?: true
    salario?: true
    sexoId?: true
    profesionId?: true
    estadoCivilId?: true
    areaId?: true
  }

  export type ColaboradorSumAggregateInputType = {
    id?: true
    salario?: true
    sexoId?: true
    profesionId?: true
    estadoCivilId?: true
    areaId?: true
  }

  export type ColaboradorMinAggregateInputType = {
    id?: true
    numeroEmpleado?: true
    nombre?: true
    apellidos?: true
    email?: true
    telefono?: true
    fechaNacimiento?: true
    fechaIngreso?: true
    salario?: true
    activo?: true
    sexoId?: true
    profesionId?: true
    estadoCivilId?: true
    areaId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ColaboradorMaxAggregateInputType = {
    id?: true
    numeroEmpleado?: true
    nombre?: true
    apellidos?: true
    email?: true
    telefono?: true
    fechaNacimiento?: true
    fechaIngreso?: true
    salario?: true
    activo?: true
    sexoId?: true
    profesionId?: true
    estadoCivilId?: true
    areaId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ColaboradorCountAggregateInputType = {
    id?: true
    numeroEmpleado?: true
    nombre?: true
    apellidos?: true
    email?: true
    telefono?: true
    fechaNacimiento?: true
    fechaIngreso?: true
    salario?: true
    activo?: true
    sexoId?: true
    profesionId?: true
    estadoCivilId?: true
    areaId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ColaboradorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Colaborador to aggregate.
     */
    where?: ColaboradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colaboradors to fetch.
     */
    orderBy?: ColaboradorOrderByWithRelationInput | ColaboradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ColaboradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colaboradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colaboradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Colaboradors
    **/
    _count?: true | ColaboradorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ColaboradorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ColaboradorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ColaboradorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ColaboradorMaxAggregateInputType
  }

  export type GetColaboradorAggregateType<T extends ColaboradorAggregateArgs> = {
        [P in keyof T & keyof AggregateColaborador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateColaborador[P]>
      : GetScalarType<T[P], AggregateColaborador[P]>
  }




  export type ColaboradorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ColaboradorWhereInput
    orderBy?: ColaboradorOrderByWithAggregationInput | ColaboradorOrderByWithAggregationInput[]
    by: ColaboradorScalarFieldEnum[] | ColaboradorScalarFieldEnum
    having?: ColaboradorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ColaboradorCountAggregateInputType | true
    _avg?: ColaboradorAvgAggregateInputType
    _sum?: ColaboradorSumAggregateInputType
    _min?: ColaboradorMinAggregateInputType
    _max?: ColaboradorMaxAggregateInputType
  }

  export type ColaboradorGroupByOutputType = {
    id: number
    numeroEmpleado: string
    nombre: string
    apellidos: string
    email: string
    telefono: string | null
    fechaNacimiento: Date
    fechaIngreso: Date
    salario: Decimal
    activo: boolean
    sexoId: number
    profesionId: number
    estadoCivilId: number
    areaId: number
    createdAt: Date
    updatedAt: Date
    _count: ColaboradorCountAggregateOutputType | null
    _avg: ColaboradorAvgAggregateOutputType | null
    _sum: ColaboradorSumAggregateOutputType | null
    _min: ColaboradorMinAggregateOutputType | null
    _max: ColaboradorMaxAggregateOutputType | null
  }

  type GetColaboradorGroupByPayload<T extends ColaboradorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ColaboradorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ColaboradorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ColaboradorGroupByOutputType[P]>
            : GetScalarType<T[P], ColaboradorGroupByOutputType[P]>
        }
      >
    >


  export type ColaboradorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numeroEmpleado?: boolean
    nombre?: boolean
    apellidos?: boolean
    email?: boolean
    telefono?: boolean
    fechaNacimiento?: boolean
    fechaIngreso?: boolean
    salario?: boolean
    activo?: boolean
    sexoId?: boolean
    profesionId?: boolean
    estadoCivilId?: boolean
    areaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sexo?: boolean | SexoDefaultArgs<ExtArgs>
    profesion?: boolean | ProfesionDefaultArgs<ExtArgs>
    estadoCivil?: boolean | EstadoCivilDefaultArgs<ExtArgs>
    area?: boolean | AreaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["colaborador"]>

  export type ColaboradorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numeroEmpleado?: boolean
    nombre?: boolean
    apellidos?: boolean
    email?: boolean
    telefono?: boolean
    fechaNacimiento?: boolean
    fechaIngreso?: boolean
    salario?: boolean
    activo?: boolean
    sexoId?: boolean
    profesionId?: boolean
    estadoCivilId?: boolean
    areaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sexo?: boolean | SexoDefaultArgs<ExtArgs>
    profesion?: boolean | ProfesionDefaultArgs<ExtArgs>
    estadoCivil?: boolean | EstadoCivilDefaultArgs<ExtArgs>
    area?: boolean | AreaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["colaborador"]>

  export type ColaboradorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numeroEmpleado?: boolean
    nombre?: boolean
    apellidos?: boolean
    email?: boolean
    telefono?: boolean
    fechaNacimiento?: boolean
    fechaIngreso?: boolean
    salario?: boolean
    activo?: boolean
    sexoId?: boolean
    profesionId?: boolean
    estadoCivilId?: boolean
    areaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sexo?: boolean | SexoDefaultArgs<ExtArgs>
    profesion?: boolean | ProfesionDefaultArgs<ExtArgs>
    estadoCivil?: boolean | EstadoCivilDefaultArgs<ExtArgs>
    area?: boolean | AreaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["colaborador"]>

  export type ColaboradorSelectScalar = {
    id?: boolean
    numeroEmpleado?: boolean
    nombre?: boolean
    apellidos?: boolean
    email?: boolean
    telefono?: boolean
    fechaNacimiento?: boolean
    fechaIngreso?: boolean
    salario?: boolean
    activo?: boolean
    sexoId?: boolean
    profesionId?: boolean
    estadoCivilId?: boolean
    areaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ColaboradorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "numeroEmpleado" | "nombre" | "apellidos" | "email" | "telefono" | "fechaNacimiento" | "fechaIngreso" | "salario" | "activo" | "sexoId" | "profesionId" | "estadoCivilId" | "areaId" | "createdAt" | "updatedAt", ExtArgs["result"]["colaborador"]>
  export type ColaboradorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sexo?: boolean | SexoDefaultArgs<ExtArgs>
    profesion?: boolean | ProfesionDefaultArgs<ExtArgs>
    estadoCivil?: boolean | EstadoCivilDefaultArgs<ExtArgs>
    area?: boolean | AreaDefaultArgs<ExtArgs>
  }
  export type ColaboradorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sexo?: boolean | SexoDefaultArgs<ExtArgs>
    profesion?: boolean | ProfesionDefaultArgs<ExtArgs>
    estadoCivil?: boolean | EstadoCivilDefaultArgs<ExtArgs>
    area?: boolean | AreaDefaultArgs<ExtArgs>
  }
  export type ColaboradorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sexo?: boolean | SexoDefaultArgs<ExtArgs>
    profesion?: boolean | ProfesionDefaultArgs<ExtArgs>
    estadoCivil?: boolean | EstadoCivilDefaultArgs<ExtArgs>
    area?: boolean | AreaDefaultArgs<ExtArgs>
  }

  export type $ColaboradorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Colaborador"
    objects: {
      sexo: Prisma.$SexoPayload<ExtArgs>
      profesion: Prisma.$ProfesionPayload<ExtArgs>
      estadoCivil: Prisma.$EstadoCivilPayload<ExtArgs>
      area: Prisma.$AreaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      numeroEmpleado: string
      nombre: string
      apellidos: string
      email: string
      telefono: string | null
      fechaNacimiento: Date
      fechaIngreso: Date
      salario: Prisma.Decimal
      activo: boolean
      sexoId: number
      profesionId: number
      estadoCivilId: number
      areaId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["colaborador"]>
    composites: {}
  }

  type ColaboradorGetPayload<S extends boolean | null | undefined | ColaboradorDefaultArgs> = $Result.GetResult<Prisma.$ColaboradorPayload, S>

  type ColaboradorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ColaboradorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ColaboradorCountAggregateInputType | true
    }

  export interface ColaboradorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Colaborador'], meta: { name: 'Colaborador' } }
    /**
     * Find zero or one Colaborador that matches the filter.
     * @param {ColaboradorFindUniqueArgs} args - Arguments to find a Colaborador
     * @example
     * // Get one Colaborador
     * const colaborador = await prisma.colaborador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ColaboradorFindUniqueArgs>(args: SelectSubset<T, ColaboradorFindUniqueArgs<ExtArgs>>): Prisma__ColaboradorClient<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Colaborador that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ColaboradorFindUniqueOrThrowArgs} args - Arguments to find a Colaborador
     * @example
     * // Get one Colaborador
     * const colaborador = await prisma.colaborador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ColaboradorFindUniqueOrThrowArgs>(args: SelectSubset<T, ColaboradorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ColaboradorClient<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Colaborador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColaboradorFindFirstArgs} args - Arguments to find a Colaborador
     * @example
     * // Get one Colaborador
     * const colaborador = await prisma.colaborador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ColaboradorFindFirstArgs>(args?: SelectSubset<T, ColaboradorFindFirstArgs<ExtArgs>>): Prisma__ColaboradorClient<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Colaborador that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColaboradorFindFirstOrThrowArgs} args - Arguments to find a Colaborador
     * @example
     * // Get one Colaborador
     * const colaborador = await prisma.colaborador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ColaboradorFindFirstOrThrowArgs>(args?: SelectSubset<T, ColaboradorFindFirstOrThrowArgs<ExtArgs>>): Prisma__ColaboradorClient<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Colaboradors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColaboradorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Colaboradors
     * const colaboradors = await prisma.colaborador.findMany()
     * 
     * // Get first 10 Colaboradors
     * const colaboradors = await prisma.colaborador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const colaboradorWithIdOnly = await prisma.colaborador.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ColaboradorFindManyArgs>(args?: SelectSubset<T, ColaboradorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Colaborador.
     * @param {ColaboradorCreateArgs} args - Arguments to create a Colaborador.
     * @example
     * // Create one Colaborador
     * const Colaborador = await prisma.colaborador.create({
     *   data: {
     *     // ... data to create a Colaborador
     *   }
     * })
     * 
     */
    create<T extends ColaboradorCreateArgs>(args: SelectSubset<T, ColaboradorCreateArgs<ExtArgs>>): Prisma__ColaboradorClient<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Colaboradors.
     * @param {ColaboradorCreateManyArgs} args - Arguments to create many Colaboradors.
     * @example
     * // Create many Colaboradors
     * const colaborador = await prisma.colaborador.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ColaboradorCreateManyArgs>(args?: SelectSubset<T, ColaboradorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Colaboradors and returns the data saved in the database.
     * @param {ColaboradorCreateManyAndReturnArgs} args - Arguments to create many Colaboradors.
     * @example
     * // Create many Colaboradors
     * const colaborador = await prisma.colaborador.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Colaboradors and only return the `id`
     * const colaboradorWithIdOnly = await prisma.colaborador.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ColaboradorCreateManyAndReturnArgs>(args?: SelectSubset<T, ColaboradorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Colaborador.
     * @param {ColaboradorDeleteArgs} args - Arguments to delete one Colaborador.
     * @example
     * // Delete one Colaborador
     * const Colaborador = await prisma.colaborador.delete({
     *   where: {
     *     // ... filter to delete one Colaborador
     *   }
     * })
     * 
     */
    delete<T extends ColaboradorDeleteArgs>(args: SelectSubset<T, ColaboradorDeleteArgs<ExtArgs>>): Prisma__ColaboradorClient<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Colaborador.
     * @param {ColaboradorUpdateArgs} args - Arguments to update one Colaborador.
     * @example
     * // Update one Colaborador
     * const colaborador = await prisma.colaborador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ColaboradorUpdateArgs>(args: SelectSubset<T, ColaboradorUpdateArgs<ExtArgs>>): Prisma__ColaboradorClient<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Colaboradors.
     * @param {ColaboradorDeleteManyArgs} args - Arguments to filter Colaboradors to delete.
     * @example
     * // Delete a few Colaboradors
     * const { count } = await prisma.colaborador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ColaboradorDeleteManyArgs>(args?: SelectSubset<T, ColaboradorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Colaboradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColaboradorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Colaboradors
     * const colaborador = await prisma.colaborador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ColaboradorUpdateManyArgs>(args: SelectSubset<T, ColaboradorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Colaboradors and returns the data updated in the database.
     * @param {ColaboradorUpdateManyAndReturnArgs} args - Arguments to update many Colaboradors.
     * @example
     * // Update many Colaboradors
     * const colaborador = await prisma.colaborador.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Colaboradors and only return the `id`
     * const colaboradorWithIdOnly = await prisma.colaborador.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ColaboradorUpdateManyAndReturnArgs>(args: SelectSubset<T, ColaboradorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Colaborador.
     * @param {ColaboradorUpsertArgs} args - Arguments to update or create a Colaborador.
     * @example
     * // Update or create a Colaborador
     * const colaborador = await prisma.colaborador.upsert({
     *   create: {
     *     // ... data to create a Colaborador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Colaborador we want to update
     *   }
     * })
     */
    upsert<T extends ColaboradorUpsertArgs>(args: SelectSubset<T, ColaboradorUpsertArgs<ExtArgs>>): Prisma__ColaboradorClient<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Colaboradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColaboradorCountArgs} args - Arguments to filter Colaboradors to count.
     * @example
     * // Count the number of Colaboradors
     * const count = await prisma.colaborador.count({
     *   where: {
     *     // ... the filter for the Colaboradors we want to count
     *   }
     * })
    **/
    count<T extends ColaboradorCountArgs>(
      args?: Subset<T, ColaboradorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ColaboradorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Colaborador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColaboradorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ColaboradorAggregateArgs>(args: Subset<T, ColaboradorAggregateArgs>): Prisma.PrismaPromise<GetColaboradorAggregateType<T>>

    /**
     * Group by Colaborador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColaboradorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ColaboradorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ColaboradorGroupByArgs['orderBy'] }
        : { orderBy?: ColaboradorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ColaboradorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetColaboradorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Colaborador model
   */
  readonly fields: ColaboradorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Colaborador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ColaboradorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sexo<T extends SexoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SexoDefaultArgs<ExtArgs>>): Prisma__SexoClient<$Result.GetResult<Prisma.$SexoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    profesion<T extends ProfesionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfesionDefaultArgs<ExtArgs>>): Prisma__ProfesionClient<$Result.GetResult<Prisma.$ProfesionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    estadoCivil<T extends EstadoCivilDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EstadoCivilDefaultArgs<ExtArgs>>): Prisma__EstadoCivilClient<$Result.GetResult<Prisma.$EstadoCivilPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    area<T extends AreaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AreaDefaultArgs<ExtArgs>>): Prisma__AreaClient<$Result.GetResult<Prisma.$AreaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Colaborador model
   */
  interface ColaboradorFieldRefs {
    readonly id: FieldRef<"Colaborador", 'Int'>
    readonly numeroEmpleado: FieldRef<"Colaborador", 'String'>
    readonly nombre: FieldRef<"Colaborador", 'String'>
    readonly apellidos: FieldRef<"Colaborador", 'String'>
    readonly email: FieldRef<"Colaborador", 'String'>
    readonly telefono: FieldRef<"Colaborador", 'String'>
    readonly fechaNacimiento: FieldRef<"Colaborador", 'DateTime'>
    readonly fechaIngreso: FieldRef<"Colaborador", 'DateTime'>
    readonly salario: FieldRef<"Colaborador", 'Decimal'>
    readonly activo: FieldRef<"Colaborador", 'Boolean'>
    readonly sexoId: FieldRef<"Colaborador", 'Int'>
    readonly profesionId: FieldRef<"Colaborador", 'Int'>
    readonly estadoCivilId: FieldRef<"Colaborador", 'Int'>
    readonly areaId: FieldRef<"Colaborador", 'Int'>
    readonly createdAt: FieldRef<"Colaborador", 'DateTime'>
    readonly updatedAt: FieldRef<"Colaborador", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Colaborador findUnique
   */
  export type ColaboradorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Colaborador
     */
    omit?: ColaboradorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    /**
     * Filter, which Colaborador to fetch.
     */
    where: ColaboradorWhereUniqueInput
  }

  /**
   * Colaborador findUniqueOrThrow
   */
  export type ColaboradorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Colaborador
     */
    omit?: ColaboradorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    /**
     * Filter, which Colaborador to fetch.
     */
    where: ColaboradorWhereUniqueInput
  }

  /**
   * Colaborador findFirst
   */
  export type ColaboradorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Colaborador
     */
    omit?: ColaboradorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    /**
     * Filter, which Colaborador to fetch.
     */
    where?: ColaboradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colaboradors to fetch.
     */
    orderBy?: ColaboradorOrderByWithRelationInput | ColaboradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Colaboradors.
     */
    cursor?: ColaboradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colaboradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colaboradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Colaboradors.
     */
    distinct?: ColaboradorScalarFieldEnum | ColaboradorScalarFieldEnum[]
  }

  /**
   * Colaborador findFirstOrThrow
   */
  export type ColaboradorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Colaborador
     */
    omit?: ColaboradorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    /**
     * Filter, which Colaborador to fetch.
     */
    where?: ColaboradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colaboradors to fetch.
     */
    orderBy?: ColaboradorOrderByWithRelationInput | ColaboradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Colaboradors.
     */
    cursor?: ColaboradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colaboradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colaboradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Colaboradors.
     */
    distinct?: ColaboradorScalarFieldEnum | ColaboradorScalarFieldEnum[]
  }

  /**
   * Colaborador findMany
   */
  export type ColaboradorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Colaborador
     */
    omit?: ColaboradorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    /**
     * Filter, which Colaboradors to fetch.
     */
    where?: ColaboradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colaboradors to fetch.
     */
    orderBy?: ColaboradorOrderByWithRelationInput | ColaboradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Colaboradors.
     */
    cursor?: ColaboradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colaboradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colaboradors.
     */
    skip?: number
    distinct?: ColaboradorScalarFieldEnum | ColaboradorScalarFieldEnum[]
  }

  /**
   * Colaborador create
   */
  export type ColaboradorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Colaborador
     */
    omit?: ColaboradorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    /**
     * The data needed to create a Colaborador.
     */
    data: XOR<ColaboradorCreateInput, ColaboradorUncheckedCreateInput>
  }

  /**
   * Colaborador createMany
   */
  export type ColaboradorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Colaboradors.
     */
    data: ColaboradorCreateManyInput | ColaboradorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Colaborador createManyAndReturn
   */
  export type ColaboradorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Colaborador
     */
    omit?: ColaboradorOmit<ExtArgs> | null
    /**
     * The data used to create many Colaboradors.
     */
    data: ColaboradorCreateManyInput | ColaboradorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Colaborador update
   */
  export type ColaboradorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Colaborador
     */
    omit?: ColaboradorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    /**
     * The data needed to update a Colaborador.
     */
    data: XOR<ColaboradorUpdateInput, ColaboradorUncheckedUpdateInput>
    /**
     * Choose, which Colaborador to update.
     */
    where: ColaboradorWhereUniqueInput
  }

  /**
   * Colaborador updateMany
   */
  export type ColaboradorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Colaboradors.
     */
    data: XOR<ColaboradorUpdateManyMutationInput, ColaboradorUncheckedUpdateManyInput>
    /**
     * Filter which Colaboradors to update
     */
    where?: ColaboradorWhereInput
    /**
     * Limit how many Colaboradors to update.
     */
    limit?: number
  }

  /**
   * Colaborador updateManyAndReturn
   */
  export type ColaboradorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Colaborador
     */
    omit?: ColaboradorOmit<ExtArgs> | null
    /**
     * The data used to update Colaboradors.
     */
    data: XOR<ColaboradorUpdateManyMutationInput, ColaboradorUncheckedUpdateManyInput>
    /**
     * Filter which Colaboradors to update
     */
    where?: ColaboradorWhereInput
    /**
     * Limit how many Colaboradors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Colaborador upsert
   */
  export type ColaboradorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Colaborador
     */
    omit?: ColaboradorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    /**
     * The filter to search for the Colaborador to update in case it exists.
     */
    where: ColaboradorWhereUniqueInput
    /**
     * In case the Colaborador found by the `where` argument doesn't exist, create a new Colaborador with this data.
     */
    create: XOR<ColaboradorCreateInput, ColaboradorUncheckedCreateInput>
    /**
     * In case the Colaborador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ColaboradorUpdateInput, ColaboradorUncheckedUpdateInput>
  }

  /**
   * Colaborador delete
   */
  export type ColaboradorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Colaborador
     */
    omit?: ColaboradorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    /**
     * Filter which Colaborador to delete.
     */
    where: ColaboradorWhereUniqueInput
  }

  /**
   * Colaborador deleteMany
   */
  export type ColaboradorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Colaboradors to delete
     */
    where?: ColaboradorWhereInput
    /**
     * Limit how many Colaboradors to delete.
     */
    limit?: number
  }

  /**
   * Colaborador without action
   */
  export type ColaboradorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Colaborador
     */
    omit?: ColaboradorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    nombre: 'nombre',
    activo: 'activo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const SexoScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    activo: 'activo'
  };

  export type SexoScalarFieldEnum = (typeof SexoScalarFieldEnum)[keyof typeof SexoScalarFieldEnum]


  export const ProfesionScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    activo: 'activo'
  };

  export type ProfesionScalarFieldEnum = (typeof ProfesionScalarFieldEnum)[keyof typeof ProfesionScalarFieldEnum]


  export const EstadoCivilScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    activo: 'activo'
  };

  export type EstadoCivilScalarFieldEnum = (typeof EstadoCivilScalarFieldEnum)[keyof typeof EstadoCivilScalarFieldEnum]


  export const AreaScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    activo: 'activo'
  };

  export type AreaScalarFieldEnum = (typeof AreaScalarFieldEnum)[keyof typeof AreaScalarFieldEnum]


  export const ColaboradorScalarFieldEnum: {
    id: 'id',
    numeroEmpleado: 'numeroEmpleado',
    nombre: 'nombre',
    apellidos: 'apellidos',
    email: 'email',
    telefono: 'telefono',
    fechaNacimiento: 'fechaNacimiento',
    fechaIngreso: 'fechaIngreso',
    salario: 'salario',
    activo: 'activo',
    sexoId: 'sexoId',
    profesionId: 'profesionId',
    estadoCivilId: 'estadoCivilId',
    areaId: 'areaId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ColaboradorScalarFieldEnum = (typeof ColaboradorScalarFieldEnum)[keyof typeof ColaboradorScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    email?: StringFilter<"Usuario"> | string
    password?: StringFilter<"Usuario"> | string
    nombre?: StringFilter<"Usuario"> | string
    activo?: BoolFilter<"Usuario"> | boolean
    createdAt?: DateTimeFilter<"Usuario"> | Date | string
    updatedAt?: DateTimeFilter<"Usuario"> | Date | string
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    password?: StringFilter<"Usuario"> | string
    nombre?: StringFilter<"Usuario"> | string
    activo?: BoolFilter<"Usuario"> | boolean
    createdAt?: DateTimeFilter<"Usuario"> | Date | string
    updatedAt?: DateTimeFilter<"Usuario"> | Date | string
  }, "id" | "email">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    email?: StringWithAggregatesFilter<"Usuario"> | string
    password?: StringWithAggregatesFilter<"Usuario"> | string
    nombre?: StringWithAggregatesFilter<"Usuario"> | string
    activo?: BoolWithAggregatesFilter<"Usuario"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Usuario"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Usuario"> | Date | string
  }

  export type SexoWhereInput = {
    AND?: SexoWhereInput | SexoWhereInput[]
    OR?: SexoWhereInput[]
    NOT?: SexoWhereInput | SexoWhereInput[]
    id?: IntFilter<"Sexo"> | number
    nombre?: StringFilter<"Sexo"> | string
    activo?: BoolFilter<"Sexo"> | boolean
    colaboradores?: ColaboradorListRelationFilter
  }

  export type SexoOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
    colaboradores?: ColaboradorOrderByRelationAggregateInput
  }

  export type SexoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nombre?: string
    AND?: SexoWhereInput | SexoWhereInput[]
    OR?: SexoWhereInput[]
    NOT?: SexoWhereInput | SexoWhereInput[]
    activo?: BoolFilter<"Sexo"> | boolean
    colaboradores?: ColaboradorListRelationFilter
  }, "id" | "nombre">

  export type SexoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
    _count?: SexoCountOrderByAggregateInput
    _avg?: SexoAvgOrderByAggregateInput
    _max?: SexoMaxOrderByAggregateInput
    _min?: SexoMinOrderByAggregateInput
    _sum?: SexoSumOrderByAggregateInput
  }

  export type SexoScalarWhereWithAggregatesInput = {
    AND?: SexoScalarWhereWithAggregatesInput | SexoScalarWhereWithAggregatesInput[]
    OR?: SexoScalarWhereWithAggregatesInput[]
    NOT?: SexoScalarWhereWithAggregatesInput | SexoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Sexo"> | number
    nombre?: StringWithAggregatesFilter<"Sexo"> | string
    activo?: BoolWithAggregatesFilter<"Sexo"> | boolean
  }

  export type ProfesionWhereInput = {
    AND?: ProfesionWhereInput | ProfesionWhereInput[]
    OR?: ProfesionWhereInput[]
    NOT?: ProfesionWhereInput | ProfesionWhereInput[]
    id?: IntFilter<"Profesion"> | number
    nombre?: StringFilter<"Profesion"> | string
    activo?: BoolFilter<"Profesion"> | boolean
    colaboradores?: ColaboradorListRelationFilter
  }

  export type ProfesionOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
    colaboradores?: ColaboradorOrderByRelationAggregateInput
  }

  export type ProfesionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nombre?: string
    AND?: ProfesionWhereInput | ProfesionWhereInput[]
    OR?: ProfesionWhereInput[]
    NOT?: ProfesionWhereInput | ProfesionWhereInput[]
    activo?: BoolFilter<"Profesion"> | boolean
    colaboradores?: ColaboradorListRelationFilter
  }, "id" | "nombre">

  export type ProfesionOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
    _count?: ProfesionCountOrderByAggregateInput
    _avg?: ProfesionAvgOrderByAggregateInput
    _max?: ProfesionMaxOrderByAggregateInput
    _min?: ProfesionMinOrderByAggregateInput
    _sum?: ProfesionSumOrderByAggregateInput
  }

  export type ProfesionScalarWhereWithAggregatesInput = {
    AND?: ProfesionScalarWhereWithAggregatesInput | ProfesionScalarWhereWithAggregatesInput[]
    OR?: ProfesionScalarWhereWithAggregatesInput[]
    NOT?: ProfesionScalarWhereWithAggregatesInput | ProfesionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Profesion"> | number
    nombre?: StringWithAggregatesFilter<"Profesion"> | string
    activo?: BoolWithAggregatesFilter<"Profesion"> | boolean
  }

  export type EstadoCivilWhereInput = {
    AND?: EstadoCivilWhereInput | EstadoCivilWhereInput[]
    OR?: EstadoCivilWhereInput[]
    NOT?: EstadoCivilWhereInput | EstadoCivilWhereInput[]
    id?: IntFilter<"EstadoCivil"> | number
    nombre?: StringFilter<"EstadoCivil"> | string
    activo?: BoolFilter<"EstadoCivil"> | boolean
    colaboradores?: ColaboradorListRelationFilter
  }

  export type EstadoCivilOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
    colaboradores?: ColaboradorOrderByRelationAggregateInput
  }

  export type EstadoCivilWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nombre?: string
    AND?: EstadoCivilWhereInput | EstadoCivilWhereInput[]
    OR?: EstadoCivilWhereInput[]
    NOT?: EstadoCivilWhereInput | EstadoCivilWhereInput[]
    activo?: BoolFilter<"EstadoCivil"> | boolean
    colaboradores?: ColaboradorListRelationFilter
  }, "id" | "nombre">

  export type EstadoCivilOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
    _count?: EstadoCivilCountOrderByAggregateInput
    _avg?: EstadoCivilAvgOrderByAggregateInput
    _max?: EstadoCivilMaxOrderByAggregateInput
    _min?: EstadoCivilMinOrderByAggregateInput
    _sum?: EstadoCivilSumOrderByAggregateInput
  }

  export type EstadoCivilScalarWhereWithAggregatesInput = {
    AND?: EstadoCivilScalarWhereWithAggregatesInput | EstadoCivilScalarWhereWithAggregatesInput[]
    OR?: EstadoCivilScalarWhereWithAggregatesInput[]
    NOT?: EstadoCivilScalarWhereWithAggregatesInput | EstadoCivilScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EstadoCivil"> | number
    nombre?: StringWithAggregatesFilter<"EstadoCivil"> | string
    activo?: BoolWithAggregatesFilter<"EstadoCivil"> | boolean
  }

  export type AreaWhereInput = {
    AND?: AreaWhereInput | AreaWhereInput[]
    OR?: AreaWhereInput[]
    NOT?: AreaWhereInput | AreaWhereInput[]
    id?: IntFilter<"Area"> | number
    nombre?: StringFilter<"Area"> | string
    activo?: BoolFilter<"Area"> | boolean
    colaboradores?: ColaboradorListRelationFilter
  }

  export type AreaOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
    colaboradores?: ColaboradorOrderByRelationAggregateInput
  }

  export type AreaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nombre?: string
    AND?: AreaWhereInput | AreaWhereInput[]
    OR?: AreaWhereInput[]
    NOT?: AreaWhereInput | AreaWhereInput[]
    activo?: BoolFilter<"Area"> | boolean
    colaboradores?: ColaboradorListRelationFilter
  }, "id" | "nombre">

  export type AreaOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
    _count?: AreaCountOrderByAggregateInput
    _avg?: AreaAvgOrderByAggregateInput
    _max?: AreaMaxOrderByAggregateInput
    _min?: AreaMinOrderByAggregateInput
    _sum?: AreaSumOrderByAggregateInput
  }

  export type AreaScalarWhereWithAggregatesInput = {
    AND?: AreaScalarWhereWithAggregatesInput | AreaScalarWhereWithAggregatesInput[]
    OR?: AreaScalarWhereWithAggregatesInput[]
    NOT?: AreaScalarWhereWithAggregatesInput | AreaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Area"> | number
    nombre?: StringWithAggregatesFilter<"Area"> | string
    activo?: BoolWithAggregatesFilter<"Area"> | boolean
  }

  export type ColaboradorWhereInput = {
    AND?: ColaboradorWhereInput | ColaboradorWhereInput[]
    OR?: ColaboradorWhereInput[]
    NOT?: ColaboradorWhereInput | ColaboradorWhereInput[]
    id?: IntFilter<"Colaborador"> | number
    numeroEmpleado?: StringFilter<"Colaborador"> | string
    nombre?: StringFilter<"Colaborador"> | string
    apellidos?: StringFilter<"Colaborador"> | string
    email?: StringFilter<"Colaborador"> | string
    telefono?: StringNullableFilter<"Colaborador"> | string | null
    fechaNacimiento?: DateTimeFilter<"Colaborador"> | Date | string
    fechaIngreso?: DateTimeFilter<"Colaborador"> | Date | string
    salario?: DecimalFilter<"Colaborador"> | Decimal | DecimalJsLike | number | string
    activo?: BoolFilter<"Colaborador"> | boolean
    sexoId?: IntFilter<"Colaborador"> | number
    profesionId?: IntFilter<"Colaborador"> | number
    estadoCivilId?: IntFilter<"Colaborador"> | number
    areaId?: IntFilter<"Colaborador"> | number
    createdAt?: DateTimeFilter<"Colaborador"> | Date | string
    updatedAt?: DateTimeFilter<"Colaborador"> | Date | string
    sexo?: XOR<SexoScalarRelationFilter, SexoWhereInput>
    profesion?: XOR<ProfesionScalarRelationFilter, ProfesionWhereInput>
    estadoCivil?: XOR<EstadoCivilScalarRelationFilter, EstadoCivilWhereInput>
    area?: XOR<AreaScalarRelationFilter, AreaWhereInput>
  }

  export type ColaboradorOrderByWithRelationInput = {
    id?: SortOrder
    numeroEmpleado?: SortOrder
    nombre?: SortOrder
    apellidos?: SortOrder
    email?: SortOrder
    telefono?: SortOrderInput | SortOrder
    fechaNacimiento?: SortOrder
    fechaIngreso?: SortOrder
    salario?: SortOrder
    activo?: SortOrder
    sexoId?: SortOrder
    profesionId?: SortOrder
    estadoCivilId?: SortOrder
    areaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sexo?: SexoOrderByWithRelationInput
    profesion?: ProfesionOrderByWithRelationInput
    estadoCivil?: EstadoCivilOrderByWithRelationInput
    area?: AreaOrderByWithRelationInput
  }

  export type ColaboradorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    numeroEmpleado?: string
    email?: string
    AND?: ColaboradorWhereInput | ColaboradorWhereInput[]
    OR?: ColaboradorWhereInput[]
    NOT?: ColaboradorWhereInput | ColaboradorWhereInput[]
    nombre?: StringFilter<"Colaborador"> | string
    apellidos?: StringFilter<"Colaborador"> | string
    telefono?: StringNullableFilter<"Colaborador"> | string | null
    fechaNacimiento?: DateTimeFilter<"Colaborador"> | Date | string
    fechaIngreso?: DateTimeFilter<"Colaborador"> | Date | string
    salario?: DecimalFilter<"Colaborador"> | Decimal | DecimalJsLike | number | string
    activo?: BoolFilter<"Colaborador"> | boolean
    sexoId?: IntFilter<"Colaborador"> | number
    profesionId?: IntFilter<"Colaborador"> | number
    estadoCivilId?: IntFilter<"Colaborador"> | number
    areaId?: IntFilter<"Colaborador"> | number
    createdAt?: DateTimeFilter<"Colaborador"> | Date | string
    updatedAt?: DateTimeFilter<"Colaborador"> | Date | string
    sexo?: XOR<SexoScalarRelationFilter, SexoWhereInput>
    profesion?: XOR<ProfesionScalarRelationFilter, ProfesionWhereInput>
    estadoCivil?: XOR<EstadoCivilScalarRelationFilter, EstadoCivilWhereInput>
    area?: XOR<AreaScalarRelationFilter, AreaWhereInput>
  }, "id" | "numeroEmpleado" | "email">

  export type ColaboradorOrderByWithAggregationInput = {
    id?: SortOrder
    numeroEmpleado?: SortOrder
    nombre?: SortOrder
    apellidos?: SortOrder
    email?: SortOrder
    telefono?: SortOrderInput | SortOrder
    fechaNacimiento?: SortOrder
    fechaIngreso?: SortOrder
    salario?: SortOrder
    activo?: SortOrder
    sexoId?: SortOrder
    profesionId?: SortOrder
    estadoCivilId?: SortOrder
    areaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ColaboradorCountOrderByAggregateInput
    _avg?: ColaboradorAvgOrderByAggregateInput
    _max?: ColaboradorMaxOrderByAggregateInput
    _min?: ColaboradorMinOrderByAggregateInput
    _sum?: ColaboradorSumOrderByAggregateInput
  }

  export type ColaboradorScalarWhereWithAggregatesInput = {
    AND?: ColaboradorScalarWhereWithAggregatesInput | ColaboradorScalarWhereWithAggregatesInput[]
    OR?: ColaboradorScalarWhereWithAggregatesInput[]
    NOT?: ColaboradorScalarWhereWithAggregatesInput | ColaboradorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Colaborador"> | number
    numeroEmpleado?: StringWithAggregatesFilter<"Colaborador"> | string
    nombre?: StringWithAggregatesFilter<"Colaborador"> | string
    apellidos?: StringWithAggregatesFilter<"Colaborador"> | string
    email?: StringWithAggregatesFilter<"Colaborador"> | string
    telefono?: StringNullableWithAggregatesFilter<"Colaborador"> | string | null
    fechaNacimiento?: DateTimeWithAggregatesFilter<"Colaborador"> | Date | string
    fechaIngreso?: DateTimeWithAggregatesFilter<"Colaborador"> | Date | string
    salario?: DecimalWithAggregatesFilter<"Colaborador"> | Decimal | DecimalJsLike | number | string
    activo?: BoolWithAggregatesFilter<"Colaborador"> | boolean
    sexoId?: IntWithAggregatesFilter<"Colaborador"> | number
    profesionId?: IntWithAggregatesFilter<"Colaborador"> | number
    estadoCivilId?: IntWithAggregatesFilter<"Colaborador"> | number
    areaId?: IntWithAggregatesFilter<"Colaborador"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Colaborador"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Colaborador"> | Date | string
  }

  export type UsuarioCreateInput = {
    email: string
    password: string
    nombre: string
    activo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    nombre: string
    activo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsuarioUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioCreateManyInput = {
    id?: number
    email: string
    password: string
    nombre: string
    activo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsuarioUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SexoCreateInput = {
    nombre: string
    activo?: boolean
    colaboradores?: ColaboradorCreateNestedManyWithoutSexoInput
  }

  export type SexoUncheckedCreateInput = {
    id?: number
    nombre: string
    activo?: boolean
    colaboradores?: ColaboradorUncheckedCreateNestedManyWithoutSexoInput
  }

  export type SexoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    colaboradores?: ColaboradorUpdateManyWithoutSexoNestedInput
  }

  export type SexoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    colaboradores?: ColaboradorUncheckedUpdateManyWithoutSexoNestedInput
  }

  export type SexoCreateManyInput = {
    id?: number
    nombre: string
    activo?: boolean
  }

  export type SexoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SexoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProfesionCreateInput = {
    nombre: string
    activo?: boolean
    colaboradores?: ColaboradorCreateNestedManyWithoutProfesionInput
  }

  export type ProfesionUncheckedCreateInput = {
    id?: number
    nombre: string
    activo?: boolean
    colaboradores?: ColaboradorUncheckedCreateNestedManyWithoutProfesionInput
  }

  export type ProfesionUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    colaboradores?: ColaboradorUpdateManyWithoutProfesionNestedInput
  }

  export type ProfesionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    colaboradores?: ColaboradorUncheckedUpdateManyWithoutProfesionNestedInput
  }

  export type ProfesionCreateManyInput = {
    id?: number
    nombre: string
    activo?: boolean
  }

  export type ProfesionUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProfesionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EstadoCivilCreateInput = {
    nombre: string
    activo?: boolean
    colaboradores?: ColaboradorCreateNestedManyWithoutEstadoCivilInput
  }

  export type EstadoCivilUncheckedCreateInput = {
    id?: number
    nombre: string
    activo?: boolean
    colaboradores?: ColaboradorUncheckedCreateNestedManyWithoutEstadoCivilInput
  }

  export type EstadoCivilUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    colaboradores?: ColaboradorUpdateManyWithoutEstadoCivilNestedInput
  }

  export type EstadoCivilUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    colaboradores?: ColaboradorUncheckedUpdateManyWithoutEstadoCivilNestedInput
  }

  export type EstadoCivilCreateManyInput = {
    id?: number
    nombre: string
    activo?: boolean
  }

  export type EstadoCivilUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EstadoCivilUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AreaCreateInput = {
    nombre: string
    activo?: boolean
    colaboradores?: ColaboradorCreateNestedManyWithoutAreaInput
  }

  export type AreaUncheckedCreateInput = {
    id?: number
    nombre: string
    activo?: boolean
    colaboradores?: ColaboradorUncheckedCreateNestedManyWithoutAreaInput
  }

  export type AreaUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    colaboradores?: ColaboradorUpdateManyWithoutAreaNestedInput
  }

  export type AreaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    colaboradores?: ColaboradorUncheckedUpdateManyWithoutAreaNestedInput
  }

  export type AreaCreateManyInput = {
    id?: number
    nombre: string
    activo?: boolean
  }

  export type AreaUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AreaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ColaboradorCreateInput = {
    numeroEmpleado: string
    nombre: string
    apellidos: string
    email: string
    telefono?: string | null
    fechaNacimiento: Date | string
    fechaIngreso: Date | string
    salario: Decimal | DecimalJsLike | number | string
    activo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sexo: SexoCreateNestedOneWithoutColaboradoresInput
    profesion: ProfesionCreateNestedOneWithoutColaboradoresInput
    estadoCivil: EstadoCivilCreateNestedOneWithoutColaboradoresInput
    area: AreaCreateNestedOneWithoutColaboradoresInput
  }

  export type ColaboradorUncheckedCreateInput = {
    id?: number
    numeroEmpleado: string
    nombre: string
    apellidos: string
    email: string
    telefono?: string | null
    fechaNacimiento: Date | string
    fechaIngreso: Date | string
    salario: Decimal | DecimalJsLike | number | string
    activo?: boolean
    sexoId: number
    profesionId: number
    estadoCivilId: number
    areaId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ColaboradorUpdateInput = {
    numeroEmpleado?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaIngreso?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sexo?: SexoUpdateOneRequiredWithoutColaboradoresNestedInput
    profesion?: ProfesionUpdateOneRequiredWithoutColaboradoresNestedInput
    estadoCivil?: EstadoCivilUpdateOneRequiredWithoutColaboradoresNestedInput
    area?: AreaUpdateOneRequiredWithoutColaboradoresNestedInput
  }

  export type ColaboradorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    numeroEmpleado?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaIngreso?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    sexoId?: IntFieldUpdateOperationsInput | number
    profesionId?: IntFieldUpdateOperationsInput | number
    estadoCivilId?: IntFieldUpdateOperationsInput | number
    areaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColaboradorCreateManyInput = {
    id?: number
    numeroEmpleado: string
    nombre: string
    apellidos: string
    email: string
    telefono?: string | null
    fechaNacimiento: Date | string
    fechaIngreso: Date | string
    salario: Decimal | DecimalJsLike | number | string
    activo?: boolean
    sexoId: number
    profesionId: number
    estadoCivilId: number
    areaId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ColaboradorUpdateManyMutationInput = {
    numeroEmpleado?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaIngreso?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColaboradorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    numeroEmpleado?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaIngreso?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    sexoId?: IntFieldUpdateOperationsInput | number
    profesionId?: IntFieldUpdateOperationsInput | number
    estadoCivilId?: IntFieldUpdateOperationsInput | number
    areaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ColaboradorListRelationFilter = {
    every?: ColaboradorWhereInput
    some?: ColaboradorWhereInput
    none?: ColaboradorWhereInput
  }

  export type ColaboradorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SexoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
  }

  export type SexoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SexoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
  }

  export type SexoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
  }

  export type SexoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProfesionCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
  }

  export type ProfesionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProfesionMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
  }

  export type ProfesionMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
  }

  export type ProfesionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EstadoCivilCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
  }

  export type EstadoCivilAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EstadoCivilMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
  }

  export type EstadoCivilMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
  }

  export type EstadoCivilSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AreaCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
  }

  export type AreaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AreaMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
  }

  export type AreaMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    activo?: SortOrder
  }

  export type AreaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type SexoScalarRelationFilter = {
    is?: SexoWhereInput
    isNot?: SexoWhereInput
  }

  export type ProfesionScalarRelationFilter = {
    is?: ProfesionWhereInput
    isNot?: ProfesionWhereInput
  }

  export type EstadoCivilScalarRelationFilter = {
    is?: EstadoCivilWhereInput
    isNot?: EstadoCivilWhereInput
  }

  export type AreaScalarRelationFilter = {
    is?: AreaWhereInput
    isNot?: AreaWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ColaboradorCountOrderByAggregateInput = {
    id?: SortOrder
    numeroEmpleado?: SortOrder
    nombre?: SortOrder
    apellidos?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    fechaNacimiento?: SortOrder
    fechaIngreso?: SortOrder
    salario?: SortOrder
    activo?: SortOrder
    sexoId?: SortOrder
    profesionId?: SortOrder
    estadoCivilId?: SortOrder
    areaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ColaboradorAvgOrderByAggregateInput = {
    id?: SortOrder
    salario?: SortOrder
    sexoId?: SortOrder
    profesionId?: SortOrder
    estadoCivilId?: SortOrder
    areaId?: SortOrder
  }

  export type ColaboradorMaxOrderByAggregateInput = {
    id?: SortOrder
    numeroEmpleado?: SortOrder
    nombre?: SortOrder
    apellidos?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    fechaNacimiento?: SortOrder
    fechaIngreso?: SortOrder
    salario?: SortOrder
    activo?: SortOrder
    sexoId?: SortOrder
    profesionId?: SortOrder
    estadoCivilId?: SortOrder
    areaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ColaboradorMinOrderByAggregateInput = {
    id?: SortOrder
    numeroEmpleado?: SortOrder
    nombre?: SortOrder
    apellidos?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    fechaNacimiento?: SortOrder
    fechaIngreso?: SortOrder
    salario?: SortOrder
    activo?: SortOrder
    sexoId?: SortOrder
    profesionId?: SortOrder
    estadoCivilId?: SortOrder
    areaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ColaboradorSumOrderByAggregateInput = {
    id?: SortOrder
    salario?: SortOrder
    sexoId?: SortOrder
    profesionId?: SortOrder
    estadoCivilId?: SortOrder
    areaId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ColaboradorCreateNestedManyWithoutSexoInput = {
    create?: XOR<ColaboradorCreateWithoutSexoInput, ColaboradorUncheckedCreateWithoutSexoInput> | ColaboradorCreateWithoutSexoInput[] | ColaboradorUncheckedCreateWithoutSexoInput[]
    connectOrCreate?: ColaboradorCreateOrConnectWithoutSexoInput | ColaboradorCreateOrConnectWithoutSexoInput[]
    createMany?: ColaboradorCreateManySexoInputEnvelope
    connect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
  }

  export type ColaboradorUncheckedCreateNestedManyWithoutSexoInput = {
    create?: XOR<ColaboradorCreateWithoutSexoInput, ColaboradorUncheckedCreateWithoutSexoInput> | ColaboradorCreateWithoutSexoInput[] | ColaboradorUncheckedCreateWithoutSexoInput[]
    connectOrCreate?: ColaboradorCreateOrConnectWithoutSexoInput | ColaboradorCreateOrConnectWithoutSexoInput[]
    createMany?: ColaboradorCreateManySexoInputEnvelope
    connect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
  }

  export type ColaboradorUpdateManyWithoutSexoNestedInput = {
    create?: XOR<ColaboradorCreateWithoutSexoInput, ColaboradorUncheckedCreateWithoutSexoInput> | ColaboradorCreateWithoutSexoInput[] | ColaboradorUncheckedCreateWithoutSexoInput[]
    connectOrCreate?: ColaboradorCreateOrConnectWithoutSexoInput | ColaboradorCreateOrConnectWithoutSexoInput[]
    upsert?: ColaboradorUpsertWithWhereUniqueWithoutSexoInput | ColaboradorUpsertWithWhereUniqueWithoutSexoInput[]
    createMany?: ColaboradorCreateManySexoInputEnvelope
    set?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    disconnect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    delete?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    connect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    update?: ColaboradorUpdateWithWhereUniqueWithoutSexoInput | ColaboradorUpdateWithWhereUniqueWithoutSexoInput[]
    updateMany?: ColaboradorUpdateManyWithWhereWithoutSexoInput | ColaboradorUpdateManyWithWhereWithoutSexoInput[]
    deleteMany?: ColaboradorScalarWhereInput | ColaboradorScalarWhereInput[]
  }

  export type ColaboradorUncheckedUpdateManyWithoutSexoNestedInput = {
    create?: XOR<ColaboradorCreateWithoutSexoInput, ColaboradorUncheckedCreateWithoutSexoInput> | ColaboradorCreateWithoutSexoInput[] | ColaboradorUncheckedCreateWithoutSexoInput[]
    connectOrCreate?: ColaboradorCreateOrConnectWithoutSexoInput | ColaboradorCreateOrConnectWithoutSexoInput[]
    upsert?: ColaboradorUpsertWithWhereUniqueWithoutSexoInput | ColaboradorUpsertWithWhereUniqueWithoutSexoInput[]
    createMany?: ColaboradorCreateManySexoInputEnvelope
    set?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    disconnect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    delete?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    connect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    update?: ColaboradorUpdateWithWhereUniqueWithoutSexoInput | ColaboradorUpdateWithWhereUniqueWithoutSexoInput[]
    updateMany?: ColaboradorUpdateManyWithWhereWithoutSexoInput | ColaboradorUpdateManyWithWhereWithoutSexoInput[]
    deleteMany?: ColaboradorScalarWhereInput | ColaboradorScalarWhereInput[]
  }

  export type ColaboradorCreateNestedManyWithoutProfesionInput = {
    create?: XOR<ColaboradorCreateWithoutProfesionInput, ColaboradorUncheckedCreateWithoutProfesionInput> | ColaboradorCreateWithoutProfesionInput[] | ColaboradorUncheckedCreateWithoutProfesionInput[]
    connectOrCreate?: ColaboradorCreateOrConnectWithoutProfesionInput | ColaboradorCreateOrConnectWithoutProfesionInput[]
    createMany?: ColaboradorCreateManyProfesionInputEnvelope
    connect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
  }

  export type ColaboradorUncheckedCreateNestedManyWithoutProfesionInput = {
    create?: XOR<ColaboradorCreateWithoutProfesionInput, ColaboradorUncheckedCreateWithoutProfesionInput> | ColaboradorCreateWithoutProfesionInput[] | ColaboradorUncheckedCreateWithoutProfesionInput[]
    connectOrCreate?: ColaboradorCreateOrConnectWithoutProfesionInput | ColaboradorCreateOrConnectWithoutProfesionInput[]
    createMany?: ColaboradorCreateManyProfesionInputEnvelope
    connect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
  }

  export type ColaboradorUpdateManyWithoutProfesionNestedInput = {
    create?: XOR<ColaboradorCreateWithoutProfesionInput, ColaboradorUncheckedCreateWithoutProfesionInput> | ColaboradorCreateWithoutProfesionInput[] | ColaboradorUncheckedCreateWithoutProfesionInput[]
    connectOrCreate?: ColaboradorCreateOrConnectWithoutProfesionInput | ColaboradorCreateOrConnectWithoutProfesionInput[]
    upsert?: ColaboradorUpsertWithWhereUniqueWithoutProfesionInput | ColaboradorUpsertWithWhereUniqueWithoutProfesionInput[]
    createMany?: ColaboradorCreateManyProfesionInputEnvelope
    set?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    disconnect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    delete?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    connect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    update?: ColaboradorUpdateWithWhereUniqueWithoutProfesionInput | ColaboradorUpdateWithWhereUniqueWithoutProfesionInput[]
    updateMany?: ColaboradorUpdateManyWithWhereWithoutProfesionInput | ColaboradorUpdateManyWithWhereWithoutProfesionInput[]
    deleteMany?: ColaboradorScalarWhereInput | ColaboradorScalarWhereInput[]
  }

  export type ColaboradorUncheckedUpdateManyWithoutProfesionNestedInput = {
    create?: XOR<ColaboradorCreateWithoutProfesionInput, ColaboradorUncheckedCreateWithoutProfesionInput> | ColaboradorCreateWithoutProfesionInput[] | ColaboradorUncheckedCreateWithoutProfesionInput[]
    connectOrCreate?: ColaboradorCreateOrConnectWithoutProfesionInput | ColaboradorCreateOrConnectWithoutProfesionInput[]
    upsert?: ColaboradorUpsertWithWhereUniqueWithoutProfesionInput | ColaboradorUpsertWithWhereUniqueWithoutProfesionInput[]
    createMany?: ColaboradorCreateManyProfesionInputEnvelope
    set?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    disconnect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    delete?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    connect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    update?: ColaboradorUpdateWithWhereUniqueWithoutProfesionInput | ColaboradorUpdateWithWhereUniqueWithoutProfesionInput[]
    updateMany?: ColaboradorUpdateManyWithWhereWithoutProfesionInput | ColaboradorUpdateManyWithWhereWithoutProfesionInput[]
    deleteMany?: ColaboradorScalarWhereInput | ColaboradorScalarWhereInput[]
  }

  export type ColaboradorCreateNestedManyWithoutEstadoCivilInput = {
    create?: XOR<ColaboradorCreateWithoutEstadoCivilInput, ColaboradorUncheckedCreateWithoutEstadoCivilInput> | ColaboradorCreateWithoutEstadoCivilInput[] | ColaboradorUncheckedCreateWithoutEstadoCivilInput[]
    connectOrCreate?: ColaboradorCreateOrConnectWithoutEstadoCivilInput | ColaboradorCreateOrConnectWithoutEstadoCivilInput[]
    createMany?: ColaboradorCreateManyEstadoCivilInputEnvelope
    connect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
  }

  export type ColaboradorUncheckedCreateNestedManyWithoutEstadoCivilInput = {
    create?: XOR<ColaboradorCreateWithoutEstadoCivilInput, ColaboradorUncheckedCreateWithoutEstadoCivilInput> | ColaboradorCreateWithoutEstadoCivilInput[] | ColaboradorUncheckedCreateWithoutEstadoCivilInput[]
    connectOrCreate?: ColaboradorCreateOrConnectWithoutEstadoCivilInput | ColaboradorCreateOrConnectWithoutEstadoCivilInput[]
    createMany?: ColaboradorCreateManyEstadoCivilInputEnvelope
    connect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
  }

  export type ColaboradorUpdateManyWithoutEstadoCivilNestedInput = {
    create?: XOR<ColaboradorCreateWithoutEstadoCivilInput, ColaboradorUncheckedCreateWithoutEstadoCivilInput> | ColaboradorCreateWithoutEstadoCivilInput[] | ColaboradorUncheckedCreateWithoutEstadoCivilInput[]
    connectOrCreate?: ColaboradorCreateOrConnectWithoutEstadoCivilInput | ColaboradorCreateOrConnectWithoutEstadoCivilInput[]
    upsert?: ColaboradorUpsertWithWhereUniqueWithoutEstadoCivilInput | ColaboradorUpsertWithWhereUniqueWithoutEstadoCivilInput[]
    createMany?: ColaboradorCreateManyEstadoCivilInputEnvelope
    set?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    disconnect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    delete?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    connect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    update?: ColaboradorUpdateWithWhereUniqueWithoutEstadoCivilInput | ColaboradorUpdateWithWhereUniqueWithoutEstadoCivilInput[]
    updateMany?: ColaboradorUpdateManyWithWhereWithoutEstadoCivilInput | ColaboradorUpdateManyWithWhereWithoutEstadoCivilInput[]
    deleteMany?: ColaboradorScalarWhereInput | ColaboradorScalarWhereInput[]
  }

  export type ColaboradorUncheckedUpdateManyWithoutEstadoCivilNestedInput = {
    create?: XOR<ColaboradorCreateWithoutEstadoCivilInput, ColaboradorUncheckedCreateWithoutEstadoCivilInput> | ColaboradorCreateWithoutEstadoCivilInput[] | ColaboradorUncheckedCreateWithoutEstadoCivilInput[]
    connectOrCreate?: ColaboradorCreateOrConnectWithoutEstadoCivilInput | ColaboradorCreateOrConnectWithoutEstadoCivilInput[]
    upsert?: ColaboradorUpsertWithWhereUniqueWithoutEstadoCivilInput | ColaboradorUpsertWithWhereUniqueWithoutEstadoCivilInput[]
    createMany?: ColaboradorCreateManyEstadoCivilInputEnvelope
    set?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    disconnect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    delete?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    connect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    update?: ColaboradorUpdateWithWhereUniqueWithoutEstadoCivilInput | ColaboradorUpdateWithWhereUniqueWithoutEstadoCivilInput[]
    updateMany?: ColaboradorUpdateManyWithWhereWithoutEstadoCivilInput | ColaboradorUpdateManyWithWhereWithoutEstadoCivilInput[]
    deleteMany?: ColaboradorScalarWhereInput | ColaboradorScalarWhereInput[]
  }

  export type ColaboradorCreateNestedManyWithoutAreaInput = {
    create?: XOR<ColaboradorCreateWithoutAreaInput, ColaboradorUncheckedCreateWithoutAreaInput> | ColaboradorCreateWithoutAreaInput[] | ColaboradorUncheckedCreateWithoutAreaInput[]
    connectOrCreate?: ColaboradorCreateOrConnectWithoutAreaInput | ColaboradorCreateOrConnectWithoutAreaInput[]
    createMany?: ColaboradorCreateManyAreaInputEnvelope
    connect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
  }

  export type ColaboradorUncheckedCreateNestedManyWithoutAreaInput = {
    create?: XOR<ColaboradorCreateWithoutAreaInput, ColaboradorUncheckedCreateWithoutAreaInput> | ColaboradorCreateWithoutAreaInput[] | ColaboradorUncheckedCreateWithoutAreaInput[]
    connectOrCreate?: ColaboradorCreateOrConnectWithoutAreaInput | ColaboradorCreateOrConnectWithoutAreaInput[]
    createMany?: ColaboradorCreateManyAreaInputEnvelope
    connect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
  }

  export type ColaboradorUpdateManyWithoutAreaNestedInput = {
    create?: XOR<ColaboradorCreateWithoutAreaInput, ColaboradorUncheckedCreateWithoutAreaInput> | ColaboradorCreateWithoutAreaInput[] | ColaboradorUncheckedCreateWithoutAreaInput[]
    connectOrCreate?: ColaboradorCreateOrConnectWithoutAreaInput | ColaboradorCreateOrConnectWithoutAreaInput[]
    upsert?: ColaboradorUpsertWithWhereUniqueWithoutAreaInput | ColaboradorUpsertWithWhereUniqueWithoutAreaInput[]
    createMany?: ColaboradorCreateManyAreaInputEnvelope
    set?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    disconnect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    delete?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    connect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    update?: ColaboradorUpdateWithWhereUniqueWithoutAreaInput | ColaboradorUpdateWithWhereUniqueWithoutAreaInput[]
    updateMany?: ColaboradorUpdateManyWithWhereWithoutAreaInput | ColaboradorUpdateManyWithWhereWithoutAreaInput[]
    deleteMany?: ColaboradorScalarWhereInput | ColaboradorScalarWhereInput[]
  }

  export type ColaboradorUncheckedUpdateManyWithoutAreaNestedInput = {
    create?: XOR<ColaboradorCreateWithoutAreaInput, ColaboradorUncheckedCreateWithoutAreaInput> | ColaboradorCreateWithoutAreaInput[] | ColaboradorUncheckedCreateWithoutAreaInput[]
    connectOrCreate?: ColaboradorCreateOrConnectWithoutAreaInput | ColaboradorCreateOrConnectWithoutAreaInput[]
    upsert?: ColaboradorUpsertWithWhereUniqueWithoutAreaInput | ColaboradorUpsertWithWhereUniqueWithoutAreaInput[]
    createMany?: ColaboradorCreateManyAreaInputEnvelope
    set?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    disconnect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    delete?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    connect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    update?: ColaboradorUpdateWithWhereUniqueWithoutAreaInput | ColaboradorUpdateWithWhereUniqueWithoutAreaInput[]
    updateMany?: ColaboradorUpdateManyWithWhereWithoutAreaInput | ColaboradorUpdateManyWithWhereWithoutAreaInput[]
    deleteMany?: ColaboradorScalarWhereInput | ColaboradorScalarWhereInput[]
  }

  export type SexoCreateNestedOneWithoutColaboradoresInput = {
    create?: XOR<SexoCreateWithoutColaboradoresInput, SexoUncheckedCreateWithoutColaboradoresInput>
    connectOrCreate?: SexoCreateOrConnectWithoutColaboradoresInput
    connect?: SexoWhereUniqueInput
  }

  export type ProfesionCreateNestedOneWithoutColaboradoresInput = {
    create?: XOR<ProfesionCreateWithoutColaboradoresInput, ProfesionUncheckedCreateWithoutColaboradoresInput>
    connectOrCreate?: ProfesionCreateOrConnectWithoutColaboradoresInput
    connect?: ProfesionWhereUniqueInput
  }

  export type EstadoCivilCreateNestedOneWithoutColaboradoresInput = {
    create?: XOR<EstadoCivilCreateWithoutColaboradoresInput, EstadoCivilUncheckedCreateWithoutColaboradoresInput>
    connectOrCreate?: EstadoCivilCreateOrConnectWithoutColaboradoresInput
    connect?: EstadoCivilWhereUniqueInput
  }

  export type AreaCreateNestedOneWithoutColaboradoresInput = {
    create?: XOR<AreaCreateWithoutColaboradoresInput, AreaUncheckedCreateWithoutColaboradoresInput>
    connectOrCreate?: AreaCreateOrConnectWithoutColaboradoresInput
    connect?: AreaWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type SexoUpdateOneRequiredWithoutColaboradoresNestedInput = {
    create?: XOR<SexoCreateWithoutColaboradoresInput, SexoUncheckedCreateWithoutColaboradoresInput>
    connectOrCreate?: SexoCreateOrConnectWithoutColaboradoresInput
    upsert?: SexoUpsertWithoutColaboradoresInput
    connect?: SexoWhereUniqueInput
    update?: XOR<XOR<SexoUpdateToOneWithWhereWithoutColaboradoresInput, SexoUpdateWithoutColaboradoresInput>, SexoUncheckedUpdateWithoutColaboradoresInput>
  }

  export type ProfesionUpdateOneRequiredWithoutColaboradoresNestedInput = {
    create?: XOR<ProfesionCreateWithoutColaboradoresInput, ProfesionUncheckedCreateWithoutColaboradoresInput>
    connectOrCreate?: ProfesionCreateOrConnectWithoutColaboradoresInput
    upsert?: ProfesionUpsertWithoutColaboradoresInput
    connect?: ProfesionWhereUniqueInput
    update?: XOR<XOR<ProfesionUpdateToOneWithWhereWithoutColaboradoresInput, ProfesionUpdateWithoutColaboradoresInput>, ProfesionUncheckedUpdateWithoutColaboradoresInput>
  }

  export type EstadoCivilUpdateOneRequiredWithoutColaboradoresNestedInput = {
    create?: XOR<EstadoCivilCreateWithoutColaboradoresInput, EstadoCivilUncheckedCreateWithoutColaboradoresInput>
    connectOrCreate?: EstadoCivilCreateOrConnectWithoutColaboradoresInput
    upsert?: EstadoCivilUpsertWithoutColaboradoresInput
    connect?: EstadoCivilWhereUniqueInput
    update?: XOR<XOR<EstadoCivilUpdateToOneWithWhereWithoutColaboradoresInput, EstadoCivilUpdateWithoutColaboradoresInput>, EstadoCivilUncheckedUpdateWithoutColaboradoresInput>
  }

  export type AreaUpdateOneRequiredWithoutColaboradoresNestedInput = {
    create?: XOR<AreaCreateWithoutColaboradoresInput, AreaUncheckedCreateWithoutColaboradoresInput>
    connectOrCreate?: AreaCreateOrConnectWithoutColaboradoresInput
    upsert?: AreaUpsertWithoutColaboradoresInput
    connect?: AreaWhereUniqueInput
    update?: XOR<XOR<AreaUpdateToOneWithWhereWithoutColaboradoresInput, AreaUpdateWithoutColaboradoresInput>, AreaUncheckedUpdateWithoutColaboradoresInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type ColaboradorCreateWithoutSexoInput = {
    numeroEmpleado: string
    nombre: string
    apellidos: string
    email: string
    telefono?: string | null
    fechaNacimiento: Date | string
    fechaIngreso: Date | string
    salario: Decimal | DecimalJsLike | number | string
    activo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profesion: ProfesionCreateNestedOneWithoutColaboradoresInput
    estadoCivil: EstadoCivilCreateNestedOneWithoutColaboradoresInput
    area: AreaCreateNestedOneWithoutColaboradoresInput
  }

  export type ColaboradorUncheckedCreateWithoutSexoInput = {
    id?: number
    numeroEmpleado: string
    nombre: string
    apellidos: string
    email: string
    telefono?: string | null
    fechaNacimiento: Date | string
    fechaIngreso: Date | string
    salario: Decimal | DecimalJsLike | number | string
    activo?: boolean
    profesionId: number
    estadoCivilId: number
    areaId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ColaboradorCreateOrConnectWithoutSexoInput = {
    where: ColaboradorWhereUniqueInput
    create: XOR<ColaboradorCreateWithoutSexoInput, ColaboradorUncheckedCreateWithoutSexoInput>
  }

  export type ColaboradorCreateManySexoInputEnvelope = {
    data: ColaboradorCreateManySexoInput | ColaboradorCreateManySexoInput[]
    skipDuplicates?: boolean
  }

  export type ColaboradorUpsertWithWhereUniqueWithoutSexoInput = {
    where: ColaboradorWhereUniqueInput
    update: XOR<ColaboradorUpdateWithoutSexoInput, ColaboradorUncheckedUpdateWithoutSexoInput>
    create: XOR<ColaboradorCreateWithoutSexoInput, ColaboradorUncheckedCreateWithoutSexoInput>
  }

  export type ColaboradorUpdateWithWhereUniqueWithoutSexoInput = {
    where: ColaboradorWhereUniqueInput
    data: XOR<ColaboradorUpdateWithoutSexoInput, ColaboradorUncheckedUpdateWithoutSexoInput>
  }

  export type ColaboradorUpdateManyWithWhereWithoutSexoInput = {
    where: ColaboradorScalarWhereInput
    data: XOR<ColaboradorUpdateManyMutationInput, ColaboradorUncheckedUpdateManyWithoutSexoInput>
  }

  export type ColaboradorScalarWhereInput = {
    AND?: ColaboradorScalarWhereInput | ColaboradorScalarWhereInput[]
    OR?: ColaboradorScalarWhereInput[]
    NOT?: ColaboradorScalarWhereInput | ColaboradorScalarWhereInput[]
    id?: IntFilter<"Colaborador"> | number
    numeroEmpleado?: StringFilter<"Colaborador"> | string
    nombre?: StringFilter<"Colaborador"> | string
    apellidos?: StringFilter<"Colaborador"> | string
    email?: StringFilter<"Colaborador"> | string
    telefono?: StringNullableFilter<"Colaborador"> | string | null
    fechaNacimiento?: DateTimeFilter<"Colaborador"> | Date | string
    fechaIngreso?: DateTimeFilter<"Colaborador"> | Date | string
    salario?: DecimalFilter<"Colaborador"> | Decimal | DecimalJsLike | number | string
    activo?: BoolFilter<"Colaborador"> | boolean
    sexoId?: IntFilter<"Colaborador"> | number
    profesionId?: IntFilter<"Colaborador"> | number
    estadoCivilId?: IntFilter<"Colaborador"> | number
    areaId?: IntFilter<"Colaborador"> | number
    createdAt?: DateTimeFilter<"Colaborador"> | Date | string
    updatedAt?: DateTimeFilter<"Colaborador"> | Date | string
  }

  export type ColaboradorCreateWithoutProfesionInput = {
    numeroEmpleado: string
    nombre: string
    apellidos: string
    email: string
    telefono?: string | null
    fechaNacimiento: Date | string
    fechaIngreso: Date | string
    salario: Decimal | DecimalJsLike | number | string
    activo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sexo: SexoCreateNestedOneWithoutColaboradoresInput
    estadoCivil: EstadoCivilCreateNestedOneWithoutColaboradoresInput
    area: AreaCreateNestedOneWithoutColaboradoresInput
  }

  export type ColaboradorUncheckedCreateWithoutProfesionInput = {
    id?: number
    numeroEmpleado: string
    nombre: string
    apellidos: string
    email: string
    telefono?: string | null
    fechaNacimiento: Date | string
    fechaIngreso: Date | string
    salario: Decimal | DecimalJsLike | number | string
    activo?: boolean
    sexoId: number
    estadoCivilId: number
    areaId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ColaboradorCreateOrConnectWithoutProfesionInput = {
    where: ColaboradorWhereUniqueInput
    create: XOR<ColaboradorCreateWithoutProfesionInput, ColaboradorUncheckedCreateWithoutProfesionInput>
  }

  export type ColaboradorCreateManyProfesionInputEnvelope = {
    data: ColaboradorCreateManyProfesionInput | ColaboradorCreateManyProfesionInput[]
    skipDuplicates?: boolean
  }

  export type ColaboradorUpsertWithWhereUniqueWithoutProfesionInput = {
    where: ColaboradorWhereUniqueInput
    update: XOR<ColaboradorUpdateWithoutProfesionInput, ColaboradorUncheckedUpdateWithoutProfesionInput>
    create: XOR<ColaboradorCreateWithoutProfesionInput, ColaboradorUncheckedCreateWithoutProfesionInput>
  }

  export type ColaboradorUpdateWithWhereUniqueWithoutProfesionInput = {
    where: ColaboradorWhereUniqueInput
    data: XOR<ColaboradorUpdateWithoutProfesionInput, ColaboradorUncheckedUpdateWithoutProfesionInput>
  }

  export type ColaboradorUpdateManyWithWhereWithoutProfesionInput = {
    where: ColaboradorScalarWhereInput
    data: XOR<ColaboradorUpdateManyMutationInput, ColaboradorUncheckedUpdateManyWithoutProfesionInput>
  }

  export type ColaboradorCreateWithoutEstadoCivilInput = {
    numeroEmpleado: string
    nombre: string
    apellidos: string
    email: string
    telefono?: string | null
    fechaNacimiento: Date | string
    fechaIngreso: Date | string
    salario: Decimal | DecimalJsLike | number | string
    activo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sexo: SexoCreateNestedOneWithoutColaboradoresInput
    profesion: ProfesionCreateNestedOneWithoutColaboradoresInput
    area: AreaCreateNestedOneWithoutColaboradoresInput
  }

  export type ColaboradorUncheckedCreateWithoutEstadoCivilInput = {
    id?: number
    numeroEmpleado: string
    nombre: string
    apellidos: string
    email: string
    telefono?: string | null
    fechaNacimiento: Date | string
    fechaIngreso: Date | string
    salario: Decimal | DecimalJsLike | number | string
    activo?: boolean
    sexoId: number
    profesionId: number
    areaId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ColaboradorCreateOrConnectWithoutEstadoCivilInput = {
    where: ColaboradorWhereUniqueInput
    create: XOR<ColaboradorCreateWithoutEstadoCivilInput, ColaboradorUncheckedCreateWithoutEstadoCivilInput>
  }

  export type ColaboradorCreateManyEstadoCivilInputEnvelope = {
    data: ColaboradorCreateManyEstadoCivilInput | ColaboradorCreateManyEstadoCivilInput[]
    skipDuplicates?: boolean
  }

  export type ColaboradorUpsertWithWhereUniqueWithoutEstadoCivilInput = {
    where: ColaboradorWhereUniqueInput
    update: XOR<ColaboradorUpdateWithoutEstadoCivilInput, ColaboradorUncheckedUpdateWithoutEstadoCivilInput>
    create: XOR<ColaboradorCreateWithoutEstadoCivilInput, ColaboradorUncheckedCreateWithoutEstadoCivilInput>
  }

  export type ColaboradorUpdateWithWhereUniqueWithoutEstadoCivilInput = {
    where: ColaboradorWhereUniqueInput
    data: XOR<ColaboradorUpdateWithoutEstadoCivilInput, ColaboradorUncheckedUpdateWithoutEstadoCivilInput>
  }

  export type ColaboradorUpdateManyWithWhereWithoutEstadoCivilInput = {
    where: ColaboradorScalarWhereInput
    data: XOR<ColaboradorUpdateManyMutationInput, ColaboradorUncheckedUpdateManyWithoutEstadoCivilInput>
  }

  export type ColaboradorCreateWithoutAreaInput = {
    numeroEmpleado: string
    nombre: string
    apellidos: string
    email: string
    telefono?: string | null
    fechaNacimiento: Date | string
    fechaIngreso: Date | string
    salario: Decimal | DecimalJsLike | number | string
    activo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sexo: SexoCreateNestedOneWithoutColaboradoresInput
    profesion: ProfesionCreateNestedOneWithoutColaboradoresInput
    estadoCivil: EstadoCivilCreateNestedOneWithoutColaboradoresInput
  }

  export type ColaboradorUncheckedCreateWithoutAreaInput = {
    id?: number
    numeroEmpleado: string
    nombre: string
    apellidos: string
    email: string
    telefono?: string | null
    fechaNacimiento: Date | string
    fechaIngreso: Date | string
    salario: Decimal | DecimalJsLike | number | string
    activo?: boolean
    sexoId: number
    profesionId: number
    estadoCivilId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ColaboradorCreateOrConnectWithoutAreaInput = {
    where: ColaboradorWhereUniqueInput
    create: XOR<ColaboradorCreateWithoutAreaInput, ColaboradorUncheckedCreateWithoutAreaInput>
  }

  export type ColaboradorCreateManyAreaInputEnvelope = {
    data: ColaboradorCreateManyAreaInput | ColaboradorCreateManyAreaInput[]
    skipDuplicates?: boolean
  }

  export type ColaboradorUpsertWithWhereUniqueWithoutAreaInput = {
    where: ColaboradorWhereUniqueInput
    update: XOR<ColaboradorUpdateWithoutAreaInput, ColaboradorUncheckedUpdateWithoutAreaInput>
    create: XOR<ColaboradorCreateWithoutAreaInput, ColaboradorUncheckedCreateWithoutAreaInput>
  }

  export type ColaboradorUpdateWithWhereUniqueWithoutAreaInput = {
    where: ColaboradorWhereUniqueInput
    data: XOR<ColaboradorUpdateWithoutAreaInput, ColaboradorUncheckedUpdateWithoutAreaInput>
  }

  export type ColaboradorUpdateManyWithWhereWithoutAreaInput = {
    where: ColaboradorScalarWhereInput
    data: XOR<ColaboradorUpdateManyMutationInput, ColaboradorUncheckedUpdateManyWithoutAreaInput>
  }

  export type SexoCreateWithoutColaboradoresInput = {
    nombre: string
    activo?: boolean
  }

  export type SexoUncheckedCreateWithoutColaboradoresInput = {
    id?: number
    nombre: string
    activo?: boolean
  }

  export type SexoCreateOrConnectWithoutColaboradoresInput = {
    where: SexoWhereUniqueInput
    create: XOR<SexoCreateWithoutColaboradoresInput, SexoUncheckedCreateWithoutColaboradoresInput>
  }

  export type ProfesionCreateWithoutColaboradoresInput = {
    nombre: string
    activo?: boolean
  }

  export type ProfesionUncheckedCreateWithoutColaboradoresInput = {
    id?: number
    nombre: string
    activo?: boolean
  }

  export type ProfesionCreateOrConnectWithoutColaboradoresInput = {
    where: ProfesionWhereUniqueInput
    create: XOR<ProfesionCreateWithoutColaboradoresInput, ProfesionUncheckedCreateWithoutColaboradoresInput>
  }

  export type EstadoCivilCreateWithoutColaboradoresInput = {
    nombre: string
    activo?: boolean
  }

  export type EstadoCivilUncheckedCreateWithoutColaboradoresInput = {
    id?: number
    nombre: string
    activo?: boolean
  }

  export type EstadoCivilCreateOrConnectWithoutColaboradoresInput = {
    where: EstadoCivilWhereUniqueInput
    create: XOR<EstadoCivilCreateWithoutColaboradoresInput, EstadoCivilUncheckedCreateWithoutColaboradoresInput>
  }

  export type AreaCreateWithoutColaboradoresInput = {
    nombre: string
    activo?: boolean
  }

  export type AreaUncheckedCreateWithoutColaboradoresInput = {
    id?: number
    nombre: string
    activo?: boolean
  }

  export type AreaCreateOrConnectWithoutColaboradoresInput = {
    where: AreaWhereUniqueInput
    create: XOR<AreaCreateWithoutColaboradoresInput, AreaUncheckedCreateWithoutColaboradoresInput>
  }

  export type SexoUpsertWithoutColaboradoresInput = {
    update: XOR<SexoUpdateWithoutColaboradoresInput, SexoUncheckedUpdateWithoutColaboradoresInput>
    create: XOR<SexoCreateWithoutColaboradoresInput, SexoUncheckedCreateWithoutColaboradoresInput>
    where?: SexoWhereInput
  }

  export type SexoUpdateToOneWithWhereWithoutColaboradoresInput = {
    where?: SexoWhereInput
    data: XOR<SexoUpdateWithoutColaboradoresInput, SexoUncheckedUpdateWithoutColaboradoresInput>
  }

  export type SexoUpdateWithoutColaboradoresInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SexoUncheckedUpdateWithoutColaboradoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProfesionUpsertWithoutColaboradoresInput = {
    update: XOR<ProfesionUpdateWithoutColaboradoresInput, ProfesionUncheckedUpdateWithoutColaboradoresInput>
    create: XOR<ProfesionCreateWithoutColaboradoresInput, ProfesionUncheckedCreateWithoutColaboradoresInput>
    where?: ProfesionWhereInput
  }

  export type ProfesionUpdateToOneWithWhereWithoutColaboradoresInput = {
    where?: ProfesionWhereInput
    data: XOR<ProfesionUpdateWithoutColaboradoresInput, ProfesionUncheckedUpdateWithoutColaboradoresInput>
  }

  export type ProfesionUpdateWithoutColaboradoresInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProfesionUncheckedUpdateWithoutColaboradoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EstadoCivilUpsertWithoutColaboradoresInput = {
    update: XOR<EstadoCivilUpdateWithoutColaboradoresInput, EstadoCivilUncheckedUpdateWithoutColaboradoresInput>
    create: XOR<EstadoCivilCreateWithoutColaboradoresInput, EstadoCivilUncheckedCreateWithoutColaboradoresInput>
    where?: EstadoCivilWhereInput
  }

  export type EstadoCivilUpdateToOneWithWhereWithoutColaboradoresInput = {
    where?: EstadoCivilWhereInput
    data: XOR<EstadoCivilUpdateWithoutColaboradoresInput, EstadoCivilUncheckedUpdateWithoutColaboradoresInput>
  }

  export type EstadoCivilUpdateWithoutColaboradoresInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EstadoCivilUncheckedUpdateWithoutColaboradoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AreaUpsertWithoutColaboradoresInput = {
    update: XOR<AreaUpdateWithoutColaboradoresInput, AreaUncheckedUpdateWithoutColaboradoresInput>
    create: XOR<AreaCreateWithoutColaboradoresInput, AreaUncheckedCreateWithoutColaboradoresInput>
    where?: AreaWhereInput
  }

  export type AreaUpdateToOneWithWhereWithoutColaboradoresInput = {
    where?: AreaWhereInput
    data: XOR<AreaUpdateWithoutColaboradoresInput, AreaUncheckedUpdateWithoutColaboradoresInput>
  }

  export type AreaUpdateWithoutColaboradoresInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AreaUncheckedUpdateWithoutColaboradoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ColaboradorCreateManySexoInput = {
    id?: number
    numeroEmpleado: string
    nombre: string
    apellidos: string
    email: string
    telefono?: string | null
    fechaNacimiento: Date | string
    fechaIngreso: Date | string
    salario: Decimal | DecimalJsLike | number | string
    activo?: boolean
    profesionId: number
    estadoCivilId: number
    areaId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ColaboradorUpdateWithoutSexoInput = {
    numeroEmpleado?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaIngreso?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profesion?: ProfesionUpdateOneRequiredWithoutColaboradoresNestedInput
    estadoCivil?: EstadoCivilUpdateOneRequiredWithoutColaboradoresNestedInput
    area?: AreaUpdateOneRequiredWithoutColaboradoresNestedInput
  }

  export type ColaboradorUncheckedUpdateWithoutSexoInput = {
    id?: IntFieldUpdateOperationsInput | number
    numeroEmpleado?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaIngreso?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    profesionId?: IntFieldUpdateOperationsInput | number
    estadoCivilId?: IntFieldUpdateOperationsInput | number
    areaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColaboradorUncheckedUpdateManyWithoutSexoInput = {
    id?: IntFieldUpdateOperationsInput | number
    numeroEmpleado?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaIngreso?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    profesionId?: IntFieldUpdateOperationsInput | number
    estadoCivilId?: IntFieldUpdateOperationsInput | number
    areaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColaboradorCreateManyProfesionInput = {
    id?: number
    numeroEmpleado: string
    nombre: string
    apellidos: string
    email: string
    telefono?: string | null
    fechaNacimiento: Date | string
    fechaIngreso: Date | string
    salario: Decimal | DecimalJsLike | number | string
    activo?: boolean
    sexoId: number
    estadoCivilId: number
    areaId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ColaboradorUpdateWithoutProfesionInput = {
    numeroEmpleado?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaIngreso?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sexo?: SexoUpdateOneRequiredWithoutColaboradoresNestedInput
    estadoCivil?: EstadoCivilUpdateOneRequiredWithoutColaboradoresNestedInput
    area?: AreaUpdateOneRequiredWithoutColaboradoresNestedInput
  }

  export type ColaboradorUncheckedUpdateWithoutProfesionInput = {
    id?: IntFieldUpdateOperationsInput | number
    numeroEmpleado?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaIngreso?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    sexoId?: IntFieldUpdateOperationsInput | number
    estadoCivilId?: IntFieldUpdateOperationsInput | number
    areaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColaboradorUncheckedUpdateManyWithoutProfesionInput = {
    id?: IntFieldUpdateOperationsInput | number
    numeroEmpleado?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaIngreso?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    sexoId?: IntFieldUpdateOperationsInput | number
    estadoCivilId?: IntFieldUpdateOperationsInput | number
    areaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColaboradorCreateManyEstadoCivilInput = {
    id?: number
    numeroEmpleado: string
    nombre: string
    apellidos: string
    email: string
    telefono?: string | null
    fechaNacimiento: Date | string
    fechaIngreso: Date | string
    salario: Decimal | DecimalJsLike | number | string
    activo?: boolean
    sexoId: number
    profesionId: number
    areaId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ColaboradorUpdateWithoutEstadoCivilInput = {
    numeroEmpleado?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaIngreso?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sexo?: SexoUpdateOneRequiredWithoutColaboradoresNestedInput
    profesion?: ProfesionUpdateOneRequiredWithoutColaboradoresNestedInput
    area?: AreaUpdateOneRequiredWithoutColaboradoresNestedInput
  }

  export type ColaboradorUncheckedUpdateWithoutEstadoCivilInput = {
    id?: IntFieldUpdateOperationsInput | number
    numeroEmpleado?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaIngreso?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    sexoId?: IntFieldUpdateOperationsInput | number
    profesionId?: IntFieldUpdateOperationsInput | number
    areaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColaboradorUncheckedUpdateManyWithoutEstadoCivilInput = {
    id?: IntFieldUpdateOperationsInput | number
    numeroEmpleado?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaIngreso?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    sexoId?: IntFieldUpdateOperationsInput | number
    profesionId?: IntFieldUpdateOperationsInput | number
    areaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColaboradorCreateManyAreaInput = {
    id?: number
    numeroEmpleado: string
    nombre: string
    apellidos: string
    email: string
    telefono?: string | null
    fechaNacimiento: Date | string
    fechaIngreso: Date | string
    salario: Decimal | DecimalJsLike | number | string
    activo?: boolean
    sexoId: number
    profesionId: number
    estadoCivilId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ColaboradorUpdateWithoutAreaInput = {
    numeroEmpleado?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaIngreso?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sexo?: SexoUpdateOneRequiredWithoutColaboradoresNestedInput
    profesion?: ProfesionUpdateOneRequiredWithoutColaboradoresNestedInput
    estadoCivil?: EstadoCivilUpdateOneRequiredWithoutColaboradoresNestedInput
  }

  export type ColaboradorUncheckedUpdateWithoutAreaInput = {
    id?: IntFieldUpdateOperationsInput | number
    numeroEmpleado?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaIngreso?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    sexoId?: IntFieldUpdateOperationsInput | number
    profesionId?: IntFieldUpdateOperationsInput | number
    estadoCivilId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColaboradorUncheckedUpdateManyWithoutAreaInput = {
    id?: IntFieldUpdateOperationsInput | number
    numeroEmpleado?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaIngreso?: DateTimeFieldUpdateOperationsInput | Date | string
    salario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    sexoId?: IntFieldUpdateOperationsInput | number
    profesionId?: IntFieldUpdateOperationsInput | number
    estadoCivilId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}